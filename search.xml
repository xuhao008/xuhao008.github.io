<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/blog/2020/08/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>第五天</title>
    <url>/blog/2020/08/05/%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="vue-js">vue.js</h3>
<h4 id="1、vue项目目录结构">1、vue项目目录结构</h4>
<p>通过weboack模板安装后的目录<br>
<img src="/blog/2020/08/05/%E7%AC%AC%E4%BA%94%E5%A4%A9/2020/08/05/%E7%AC%AC%E4%BA%94%E5%A4%A9/1.jpg" alt="images"></p>
<table>
<thead>
<tr>
<th>目录/文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>build</td>
<td>项目构建(webpack)相关代码</td>
</tr>
<tr>
<td>config</td>
<td>配置目录，包括端口号等。我们初学可以使用默认的。</td>
</tr>
<tr>
<td>static</td>
<td>静态资源目录，如图片、字体等。</td>
</tr>
<tr>
<td>test</td>
<td>初始测试目录，可删除</td>
</tr>
<tr>
<td>.xxx文件</td>
<td>这些是一些配置文件，包括语法配置，git配置等。</td>
</tr>
<tr>
<td>index.html</td>
<td>首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td>
</tr>
<tr>
<td>package.json</td>
<td>项目配置文件。</td>
</tr>
<tr>
<td><a href="http://README.md" target="_blank" rel="noopener">README.md</a></td>
<td>项目的说明文档，markdown 格式</td>
</tr>
</tbody>
</table>
<p>src目录<br>
<img src="/blog/2020/08/05/%E7%AC%AC%E4%BA%94%E5%A4%A9/2020/08/05/%E7%AC%AC%E4%BA%94%E5%A4%A9/2.jpg" alt="src目录"></p>
<table>
<thead>
<tr>
<th>目录/文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>assets</td>
<td>放置一些图片，如logo等。</td>
</tr>
<tr>
<td>components</td>
<td>目录里面放了一个组件文件，可以不用。</td>
</tr>
<tr>
<td>router</td>
<td>项目的路由，通过下面的index.js可以设置路由</td>
</tr>
<tr>
<td>App.vue</td>
<td>项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。</td>
</tr>
<tr>
<td>main.js</td>
<td>项目的核心文件。</td>
</tr>
</tbody>
</table>
<h4 id="2、watch监听事件">2、watch监听事件</h4>
<p>我们可以通过 watch 来响应数据的变化。<br>
例如：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: </span><span class="template-variable">&#123;&#123; counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="xml">    el: '#app',</span></span><br><span class="line"><span class="xml">    data: &#123;</span></span><br><span class="line"><span class="xml">        counter: 1</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">vm.$watch('counter', function(nval, oval) &#123;</span></span><br><span class="line"><span class="xml">    alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!');</span></span><br></pre></td></tr></table></figure>
<h4 id="3、组件">3、组件</h4>
<p>组件可以扩展 HTML 元素，封装可重用的代码。</p>
<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树<br>
注册一个全局组件语法格式如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>component(tagName, options)</span><br></pre></td></tr></table></figure>
<p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;tagName&gt;</span><span class="section">&lt;/tagName&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>全局组件</strong><br>
所有实例都能用全局组件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>局部组件</strong> 我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// &lt;runoob&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="actionscript">    <span class="string">'runoob'</span>: Child</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Prop</strong><br>
prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。</p>
<p>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>动态 Prop</strong><br>
类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    parentMsg: <span class="string">'父组件内容'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;ol&gt;</span></span><br><span class="line">    &lt;todo-item v-<span class="keyword">for</span>=<span class="string">"item in sites"</span> v-bind:todo=<span class="string">"item"</span>&gt;&lt;/todo-item&gt;</span><br><span class="line">      &lt;/<span class="keyword">ol</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">&lt;script&gt;</span></span><br><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  prop<span class="variable">s:</span> [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#app'</span>,</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    site<span class="variable">s:</span> [</span><br><span class="line">      &#123; tex<span class="variable">t:</span> <span class="string">'Runoob'</span> &#125;,</span><br><span class="line">      &#123; tex<span class="variable">t:</span> <span class="string">'Google'</span> &#125;,</span><br><span class="line">      &#123; tex<span class="variable">t:</span> <span class="string">'Taobao'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</strong></p>
<p><strong>Prop 验证</strong><br>
组件可以为 props 指定验证要求。</p>
<p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; message: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>自定义事件</strong><br>
父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p>
<p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：<br>
使用 $on(eventName) 监听事件<br>
使用 $emit(eventName) 触发事件<br>
另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p>
<p>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"incrementHandler"</span>&gt;</span></span><span class="template-variable">&#123;&#123; counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">  data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    incrementHandler: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    incrementTotal: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">my</span>-component v-<span class="keyword">on</span>:click.native=<span class="string">"doTheThing"</span>&gt;&lt;/<span class="keyword">my</span>-component&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数，这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例</p>
</blockquote>
<h4 id="4、自定义指令">4、自定义指令</h4>
<p>Vue 也允许注册自定义指令<br>
下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 当绑定元素插入到 DOM 中。</span></span></span><br><span class="line"><span class="actionscript">  inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 聚焦元素</span></span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>钩子函数</strong><br>
指令定义函数提供了几个钩子函数（可选）：</p>
<ul>
<li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>
<li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li>
<li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>
<li>componentUpdated:被绑定元素所在模板完成一次更新周期时调用。</li>
<li>unbind: 只调用一次， 指令与元素解绑时调用。</li>
</ul>
<p><strong>钩子函数参数</strong><br>
钩子函数的参数有：</p>
<ul>
<li>el: 指令所绑定的元素，可以用来直接操作 DOM 。</li>
<li>binding: 一个对象，包含以下属性：
<ul>
<li>name: 指令名，不包括 v- 前缀。</li>
<li>value: 指令的绑定值， 例如： v-my-directive=“1 + 1”, value 的值是 2。</li>
<li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression: 绑定值的表达式或变量名。 例如 v-my-directive=“1 + 1” ， expression 的值是 “1 + 1”。</li>
<li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。</li>
<li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li>
</ul>
</li>
<li>vnode: Vue 编译生成的虚拟节点。</li>
<li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>  <span class="attr">v-runoob:hello.a.b</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  bind: <span class="function"><span class="keyword">function</span> <span class="params">(el, binding, vnode)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span></span><br><span class="line">    el.innerHTML =</span><br><span class="line"><span class="actionscript">      <span class="string">'name: '</span>       + s(binding.name) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">      <span class="string">'value: '</span>      + s(binding.value) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">      <span class="string">'expression: '</span> + s(binding.expression) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">      <span class="string">'argument: '</span>   + s(binding.arg) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">      <span class="string">'modifiers: '</span>  + s(binding.modifiers) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'vnode keys: '</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">', '</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">'菜鸟教程!'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">"runoob"</span></span><br><span class="line"><span class="string">value:</span> <span class="string">"菜鸟教程!"</span></span><br><span class="line"><span class="string">expression:</span> <span class="string">"message"</span></span><br><span class="line"><span class="string">argument:</span> <span class="string">"hello"</span></span><br><span class="line"><span class="string">modifiers:</span> &#123;<span class="string">"a"</span>:<span class="literal">true</span>,<span class="string">"b"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">vnode <span class="string">keys:</span> tag, data, children, text, elm, ns, context, functionalContext, key, componentOptions, componentInstance, parent, raw, isStatic, isRootInsert, isComment, isCloned, isOnce</span><br></pre></td></tr></table></figure>
<p>有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'runoob'</span>, function (el, binding) &#123;</span><br><span class="line">  <span class="comment">// 设置指令的背景颜色</span></span><br><span class="line">  el<span class="selector-class">.style</span><span class="selector-class">.backgroundColor</span> = binding<span class="selector-class">.value</span>.<span class="attribute">color</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-runoob</span>=<span class="string">"&#123; color: 'green', text: '菜鸟教程!' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">Vue.directive('runoob', function (el, binding) </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    // 简写方式设置文本及背景颜色</span></span><br><span class="line"><span class="xquery">    el.innerHTML = binding.<span class="keyword">value</span>.<span class="type">text</span></span></span><br><span class="line"><span class="xquery">    el.style.backgroundColor = binding.<span class="keyword">value</span>.color</span></span><br><span class="line"><span class="xquery">&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="xquery">&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="5、路由">5、路由</h4>
<p>通过路由可以根据不同路径访问不同内容，可以实现多视图的单页web应用</p>
<p>使用vue路由需要安装依赖：npm install vue-router</p>
<p>在第四天也学习过相关路由，今天继续完善相关代码的解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><router-link> 相关属性<br>
<strong>to</strong><br>
表示目标路由的链接。 当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</router-link></p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 字符串 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 同上 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'home' &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; name: 'user', params: &#123; userId: 123 &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'register', query: &#123; plan: 'private' &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>replace</strong><br>
设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: '/abc'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>append</strong><br>
设置 append 属性后，则在当前 (相对) 路径前添加其路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'relative/path'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>tag</strong><br>
有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。</li></router-link></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span> <span class="attr">tag</span>=<span class="string">"li"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>active-class</strong><br>
设置 链接激活时使用的 CSS 类名。可以通过以下代码来替代。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">   <span class="selector-class">._active</span>&#123;</span></span><br><span class="line">      background-color : red;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route1'&#125;"</span> <span class="attr">active-class</span> = <span class="string">"_active"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route2'&#125;"</span> <span class="attr">tag</span> = <span class="string">"span"</span>&gt;</span>Router Link 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>exact-active-class</strong><br>
配置当链接被精确匹配的时候应该激活的 class。可以通过以下代码来替代。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"</span></span></span><span class="template-variable">&#123; path: '/route1'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">exact-active-class</span> = <span class="string">"_active"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"</span></span></span><span class="template-variable">&#123; path: '/route2'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">tag</span> = <span class="string">"span"</span>&gt;</span>Router Link 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>event</strong><br>
声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"</span></span></span><span class="template-variable">&#123; path: '/route1'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">event</span> = <span class="string">"mouseover"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>以上代码设置了 event 为 mouseover ，及在鼠标移动到 Router Link 1 上时导航的 HTML 内容会发生改变。</p>
<p><strong>exact-active-class 和 active-class 的区别</strong></p>
<p>router-link 默认情况下的路由是模糊匹配，例如当前路径是 /article/1 那么也会激活 <router-link to="/article">，所以当设置 exact-active-class 以后，这个 router-link 只有在当前路由被全包含匹配时才会被激活 exact-active-class 中的 class，例如：</router-link></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/article"</span> active-<span class="class"><span class="keyword">class</span></span>=<span class="string">"router-active"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当用户访问 /article/1 时会被激活为：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"#/article"</span> <span class="attribute">class</span>=<span class="string">"router-active"</span> <span class="attribute">rel</span>=<span class="string">"nofollow"</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>而当使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/article"</span> exact-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">"router-active"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当用户访问 /article/1 时，不会激活这个 link 的 class：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> href=<span class="string">"#/article"</span> <span class="built_in">rel</span>=<span class="string">"nofollow"</span>&gt;&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第四天</title>
    <url>/blog/2020/08/03/%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="Vue-js">Vue.js</h3>
<h4 id="1、Vue-js-是什么">1、Vue.js 是什么</h4>
<p>vue是一套用于构建用户界面的渐进式框架</p>
<p>可以通过引入vue.js，进行vue项目框架开发</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2、声明式渲染">2、声明式渲染</h4>
<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="symbol">id</span>=<span class="string">"app"</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意我们不再和 HTML 直接交互了。一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 #app) 然后对其进行完全控制。那个 HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部。</p>
</blockquote>
<p><strong>v-bind</strong>：该指令的意思是：“将这个元素节点的 title attribute 和 Vue 实例的 message property 保持一致”。</p>
<p>v-bind 缩写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3、条件与循环">3、条件与循环</h4>
<p>**v-for **指令可以绑定数组的数据来渲染一个项目列表：</p>
<h4 id="4、处理用户输入">4、处理用户输入</h4>
<p>为了让用户和你的应用进行交互，我们可以用 <strong>v-on</strong> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法</p>
<p>v-on 缩写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-model</strong> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p>
<h4 id="5、组件化应用构建">5、组件化应用构建</h4>
<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-7"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="xml">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="xml">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="xml">      作详细解释。</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">todo-item</span></span></span></span><br><span class="line"><span class="xml">      v-for="item in groceryList"</span></span><br><span class="line"><span class="xml">      v-bind:todo="item"</span></span><br><span class="line"><span class="xml">      v-bind:key="item.id"</span></span><br><span class="line"><span class="xml">    &gt;<span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app7 = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app-7'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">0</span>, text: <span class="string">'蔬菜'</span> &#125;,</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">1</span>, text: <span class="string">'奶酪'</span> &#125;,</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">2</span>, text: <span class="string">'随便其它什么人吃的东西'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="6、vue生命周期">6、vue生命周期</h4>
<p><img src="/blog/2020/08/03/%E7%AC%AC%E5%9B%9B%E5%A4%A9/2020/08/03/%E7%AC%AC%E5%9B%9B%E5%A4%A9/lifecycle.jpg" alt="lifecycle"></p>
<p>创建vue项目<br>
需要先安装nodejs，vue-cli<br>
使用vue create projectname创建<br>
或者通过webpack模板安装：vue init webpack projectname<br>
可以在package.json中配置启动命令</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">  <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"vue-cli-service build"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>npm run serve,npm run dev,npm run build<br>
在App.vue中可以设置跳转路由和显示页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">"active"</span> <span class="attr">exact</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;name: 'Home',params:&#123;classification:'Home'&#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">"active"</span> <span class="attr">exact</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;name: 'Page',params:&#123;classification:'Page'&#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--支持路由页面显示--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>设置跳转路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteConfig&gt; = [</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/item/:classification(.*)'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'主页'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="comment">//hash模式，兼容性较高，地址栏多了一个#号，history模式较美观</span></span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册一个全局前置守卫，同步浏览器标签名称</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,form,next</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="comment">/*路由变化修改title*/</span></span><br><span class="line">  <span class="keyword">if</span>(to.meta.title)&#123;</span><br><span class="line">      <span class="built_in">document</span>.title=to.meta.title</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果有进行后台请求，我们可以使用axios，先在终端安装:npm  i axios<br>
然后在需要的页面导入：import axios from ‘axios’</p>
<p>如果前后端不在一个服务器，就要跨域，我们可以通过设置代理配置，进行跨域<br>
在项目根目录下创建vue.config.js</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span>=&#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        proxy:&#123;</span><br><span class="line">            <span class="string">'api'</span>:&#123;</span><br><span class="line">                target: <span class="string">'http://localhost:8000'</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span> : <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的pathRewrite，代表忽略请求路径的/api，target代表要代理的域名地址<br>
使用：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re=<span class="keyword">await</span> axios(&#123;</span><br><span class="line">          url: <span class="string">'api/page/getGoodList'</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第三天</title>
    <url>/blog/2020/07/31/%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="一、JAVA基础知识点">一、JAVA基础知识点</h3>
<h4 id="1、关于java-final-static-this-super关键词的总结">1、关于java,final,static,this,super关键词的总结</h4>
<p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super" target="_blank" rel="noopener">https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super</a></p>
<h4 id="2、使用-this-和-super-要注意的问题">2、使用 this 和 super 要注意的问题</h4>
<ul>
<li>在构造器中使用 super（） 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。</li>
<li>this、super不能用在static方法中。</li>
</ul>
<h4 id="3、static">3、static</h4>
<blockquote>
<p>一个类中的静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果静态代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>
</blockquote>
<ul>
<li>静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问</li>
<li>静态导包</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用</span></span><br><span class="line"> <span class="comment">//如果只想导入单一某个静态方法，只需要将换成对应的方法名即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;<span class="comment">//换成import static java.lang.Math.max;具有一样的效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="built_in">max</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、接口和抽象类">4、接口和抽象类</h4>
<ul>
<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li>
<li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li>
<li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li>
<li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li>
</ul>
<blockquote>
<p>关于抽象类<br>
JDK 1.8以前，抽象类的方法替代访问权限为受保护的<br>
JDK 1.8时，抽象类的方法可以访问权限转换为默认<br>
关于接口<br>
JDK 1.8以前，接口中的方法必须是public的<br>
JDK 1.8时，接口中的方法可以是public的，也可以是默认的<br>
JDK 1.9时，接口中的方法可以是private的</p>
</blockquote>
<h4 id="5、collections-工具类和-Arrays-工具类常见方法总结">5、collections 工具类和 Arrays 工具类常见方法总结</h4>
<p><a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md" target="_blank" rel="noopener">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md</a></p>
<h3 id="二、JAVA易错问题">二、JAVA易错问题</h3>
<h4 id="1、正确使用-equals-方法">1、正确使用 equals 方法</h4>
<p>Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</span></span><br><span class="line"><span class="built_in">String</span> str = <span class="built_in">null</span>;</span><br><span class="line"><span class="keyword">if</span> (str.<span class="keyword">equals</span>(<span class="string">"SnailClimb"</span>)) &#123;</span><br><span class="line">  <span class="params">...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面的程序会抛出空指针异常，下面这种就不会</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">"SnailClimb"</span><span class="string">.equals</span><span class="params">(str)</span>;<span class="string">//</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>不过更推荐使用 java.util.Objects#equals(JDK7 引入的工具类)。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">Objects.<span class="keyword">equals</span>(<span class="literal">null</span>,<span class="string">"SnailClimb"</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>我们看一下java.util.Objects#equals的源码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> a, <span class="keyword">Object</span> b) &#123;</span><br><span class="line">        <span class="comment">// 可以避免空指针异常。如果a==null的话此时a.equals(b)就不会得到执行，避免出现空指针异常。</span></span><br><span class="line">        <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、合理使用BigDecimal">2、合理使用BigDecimal</h4>
<p>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。看下面代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> a = <span class="number">1.0f</span> - <span class="number">0.9f</span>;</span><br><span class="line"><span class="built_in">float</span> b = <span class="number">0.9f</span> - <span class="number">0.8f</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(a);<span class="comment">// 0.100000024</span></span><br><span class="line">System.<span class="keyword">out</span>.println(b);<span class="comment">// 0.099999964</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a == b);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>结果和我们需要的不同，因为这样子会精度丢失，我们可以使用 BigDecimal 来定义浮点数的值，再进行浮点数的运算操作。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"1.0"</span>)</span>;</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"0.9"</span>)</span>;</span><br><span class="line">BigDecimal c = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"0.8"</span>)</span>;</span><br><span class="line">BigDecimal x = a.subtract(b);<span class="comment">// 0.1</span></span><br><span class="line">BigDecimal y = b.subtract(c);<span class="comment">// 0.1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(x.equals(y));<span class="comment">// true</span></span><br><span class="line"><span class="comment">//a.compareTo(b);返回 -1 表示小于，0 表示 等于， 1表示 大于。</span></span><br><span class="line">BigDecimal a = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"1.0"</span>)</span>;</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"0.9"</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(a.compare<span class="constructor">To(<span class="params">b</span>)</span>);<span class="comment">// 1</span></span><br><span class="line"><span class="comment">//通过 setScale方法设置保留几位小数以及保留规则</span></span><br><span class="line">BigDecimal m = <span class="keyword">new</span> <span class="constructor">BigDecimal(<span class="string">"1.255433"</span>)</span>;</span><br><span class="line">BigDecimal n = m.set<span class="constructor">Scale(3,BigDecimal.ROUND_HALF_DOWN)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(n);<span class="comment">// 1.255</span></span><br></pre></td></tr></table></figure>
<h4 id="3、Arrays-asList">3、Arrays.asList()</h4>
<p>Arrays.asList()可以使用它将一个数组转换为一个List集合。</p>
<p>Arrays.asList()将数组转换为集合后,底层其实还是数组</p>
<p>在使用时要注意，传递的数组必须是对象数组，而不是基本类型。<br>
Arrays.asList()是泛型方法，传入的对象必须是对象数组。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">myArray</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myList.size<span class="literal">()</span>);<span class="comment">//1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myList.get(<span class="number">0</span>));<span class="comment">//数组地址值</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myList.get(<span class="number">1</span>));<span class="comment">//报错：ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="built_in">int</span> <span class="literal">[]</span> <span class="built_in">array</span>=(<span class="built_in">int</span><span class="literal">[]</span>) myList.get(<span class="number">0</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">array</span><span class="literal">[<span class="number">0</span>]</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>我们使用包装类型数组就可以解决这个问题。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Integer[] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>使用集合的修改方法:add()、remove()、clear()会抛出异常。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">List myList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myList.add(<span class="number">4</span>);<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br><span class="line">myList.remove(<span class="number">1</span>);<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br><span class="line">myList.clear();<span class="comment">//运行时报错：UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>
<p>其他将数组转换为集合的方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">List <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span>)</span><br></pre></td></tr></table></figure>
<p>使用stream</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Integer <span class="literal">[]</span> myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>stream(myArray).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">List()</span>);</span><br><span class="line"><span class="comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span></span><br><span class="line"><span class="built_in">int</span> <span class="literal">[]</span> myArray2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">List myList = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>stream(myArray2).boxed<span class="literal">()</span>.collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">List()</span>);</span><br></pre></td></tr></table></figure>
<h3 id="三、J2EE基础">三、J2EE基础</h3>
<h4 id="1、Servlet">1、Servlet</h4>
<blockquote>
<p>在Java Web程序中，Servlet主要负责接收用户请求 HttpServletRequest,在doGet(),doPost()中做相应的处理，并将回应HttpServletResponse反馈给用户。Servlet 可以设置初始化参数，供Servlet内部使用。一个Servlet类只会有一个实例，在它初始化时调用init()方法，销毁时调用destroy()方法**。**Servlet需要在web.xml中配置（MyEclipse中创建Servlet会自动配置），一个Servlet可以设置多个URL访问。Servlet不是线程安全，因此要谨慎使用类变量。</p>
</blockquote>
<p>1、Servlet接口定义了5个方法，其中前三个方法与Servlet生命周期相关：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> init(ServletConfig config) <span class="keyword">throws</span> ServletException</span><br><span class="line"><span class="keyword">void</span> service(ServletRequest req, ServletResponse resp) <span class="keyword">throws</span> ServletException, java.io.IOException</span><br><span class="line"><span class="keyword">void</span> destroy()</span><br><span class="line">java.lang.<span class="keyword">String</span> getServletInfo()</span><br><span class="line">ServletConfig getServletConfig()</span><br></pre></td></tr></table></figure>
<p>2、<strong>生命周期：</strong></p>
<blockquote>
<p>Web容器加载Servlet并将其实例化后，Servlet生命周期开始，容器运行其init()方法进行Servlet的初始化；请求到达时调用Servlet的service()方法，service()方法会根据需要调用与请求对应的doGet或doPost等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的destroy()方法。init方法和destroy方法只会执行一次，service方法客户端每次请求Servlet都会执行。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p>
</blockquote>
<p>3、<strong>什么情况下调用doGet()和doPost()</strong></p>
<p>Form标签里的method的属性为get时调用doGet()，为post时调用doPost()。</p>
<p>4、<strong>转发(Forward)和重定向(Redirect)的区别</strong><br>
转发是服务器行为，重定向是客户端行为<br>
。<br>
转发（Forward） 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">request</span>.getRequestDispatcher(<span class="string">"login_success.jsp"</span>).forward(<span class="built_in">request</span>, <span class="built_in">response</span>);</span><br></pre></td></tr></table></figure>
<p>重定向（Redirect） 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 HttpServletResponse 的 setStatus(int status) 方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。</p>
<ul>
<li>从地址栏显示来说:<br>
forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</li>
<li>从数据共享来说:<br>
forward:转发页面和转发到的页面可以共享request里面的数据. redirect:不能共享数据.</li>
<li>从运用地方来说:<br>
forward:一般用于用户登陆的时候,根据角色转发到相应的模块. redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</li>
<li>从效率来说:<br>
forward:高. redirect:低.</li>
</ul>
<p>5、自动刷新(Refresh)<br>
自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet中通过HttpServletResponse对象设置Header属性实现自动刷新例如：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Response</span>.</span></span>set<span class="constructor">Header(<span class="string">"Refresh"</span>,<span class="string">"5;URL=http://localhost:8080/servlet/example.htm"</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>其中5为时间，单位为秒。URL指定就是要跳转的页面（如果设置自己的路径，就会实现每过5秒自动刷新本页面一次）</p>
<h4 id="6、JSP9大内置对象">6、JSP9大内置对象</h4>
<ul>
<li>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</li>
<li>response：封装服务器对客户端的响应；</li>
<li>pageContext：通过该对象可以获取其他对象；</li>
<li>session：封装用户会话的对象；</li>
<li>application：封装服务器运行环境的对象；</li>
<li>out：输出服务器响应的输出流对象；</li>
<li>config：Web应用的配置对象；</li>
<li>page：JSP页面本身（相当于Java程序中的this）；</li>
<li>exception：封装页面抛出异常的对象。</li>
</ul>
<h3 id="四、重点知识点">四、重点知识点</h3>
<h4 id="1、枚举的使用">1、枚举的使用</h4>
<p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basic/%E7%94%A8%E5%A5%BDJava%E4%B8%AD%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%9C%9F%E7%9A%84%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95.md" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basic/用好Java中的枚举真的没有那么简单.md</a></p>
]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第二天</title>
    <url>/blog/2020/07/30/%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<h4 id="JAVA基础学习">JAVA基础学习</h4>
<h5 id="1、java语言特点">1、java语言特点</h5>
<ul>
<li>面向对象—&gt;继承，封装，多态</li>
<li>可以跨平台—&gt;java虚拟机(JVM)</li>
<li>安全性，可靠性</li>
<li>编译与解释并存</li>
</ul>
<h5 id="2、JDK，JRE，JVM特点区别">2、JDK，JRE，JVM特点区别</h5>
<ol>
<li>
<p>JDK和JRE<br>
JDK包括JRE，有编译器和一系列工具，可以创建和编译程序<br>
JRE是java的运行环境，包括了java虚拟机JVM，java类库，和一些组件<br>
在很多情况下，如果只是要运行java程序，可以只安装JRE，如果需要编程就需要JDK了，但是如果代码里面有JSP就需要JDK了，因为JSP在运行的时候会先把代码转换成servlet，通过JDK编译</p>
</li>
<li>
<p>JVM，JAVA虚拟机，用来运行java字节码，JVM具有不同实现，可以在多个平台运行<br>
在java中，可以被jvm所理解的代码就是字节码，也就是.class结尾的文件。</p>
</li>
</ol>
<p><img src="https://camo.githubusercontent.com/8f6eceddf64b5948c69a398d1a0e777c9c7f8e5b/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f4a6176612532302545372541382538422545352542412538462545382542462539302545382541312538432545382542462538372545372541382538422e706e67" alt="image"></p>
<blockquote>
<p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p>
</blockquote>
<h5 id="3、JAVA程序的主类">3、JAVA程序的主类</h5>
<p>包含main()方法的类，就是主类，而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的<strong>入口</strong>点。</p>
<h5 id="4、字符型常量和字符串常量的区别">4、字符型常量和字符串常量的区别?</h5>
<ol>
<li>形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符</li>
<li>含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</li>
<li>占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 (注意： char 在 Java 中占两个字节)</li>
</ol>
<h5 id="5、自增自减运算符">5、自增自减运算符</h5>
<p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（–）。</p>
<p>++和–运算符可以放在操作数之前，也可以放在操作数之后，当运算符放在操作数之前时，先自增/减，再赋值；当运算符放在操作数之后时，先赋值，再自增/减。 用一句口诀就是：“<strong>符号在前就先加/减，符号在后就后加/减</strong>”。</p>
<h5 id="6、continue、break、和return的区别">6、continue、break、和return的区别</h5>
<ol>
<li>continue ：指跳出当前的这一次循环，继续下一次循环。</li>
<li>break ：指跳出整个循环体，继续执行循环下面的语句。</li>
<li>return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：
<ul>
<li><strong>return;</strong>：直接使用 return 结束方法执行，用于没有返回值函数的方法</li>
<li><strong>return value</strong>; ：return 一个特定值，用于有返回值函数的方法</li>
</ul>
</li>
</ol>
<h5 id="7、Java泛型，什么是类型擦除，常用的通配符">7、Java泛型，什么是类型擦除，常用的通配符</h5>
<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>
<p>Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//这里直接添加会报错</span></span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">Class&lt;? extends List&gt; clazz = list.getClass();</span><br><span class="line">Method add = clazz.getDeclaredMethod(<span class="string">"add"</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//但是通过反射添加，是可以的</span></span><br><span class="line">add.invoke(list, <span class="string">"kl"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list)</span><br></pre></td></tr></table></figure>
<h6 id="泛型一般有三种使用方式-泛型类、泛型接口、泛型方法。">泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。</h6>
<p><strong>1.泛型类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何实例化泛型类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure>
<p><strong>2.泛型接口 ：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现泛型接口，不指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现泛型接口，指定类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3.泛型方法 ：</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function">   </span>&#123;         </span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.<span class="built_in">printf</span>( <span class="string">"%s "</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;;</span><br><span class="line">printArray( intArray  ); </span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></table></figure>
<p><strong>常用的通配符为： T，E，K，V，？</strong></p>
<ul>
<li>？ 表示不确定的 java 类型</li>
<li>T (type) 表示具体的一个java类型</li>
<li>K V (key value) 分别代表java键值中的Key Value</li>
<li>E (element) 代表Element</li>
</ul>
<h5 id="8、hashCode-与-equals">8、hashCode()与 equals()</h5>
<p>hashCode()介绍:</p>
<p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。另外需要注意的是： Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。</p>
<p>为什么要有 hashCode？</p>
<p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head fist java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p>
<p>为什么重写 equals 时必须重写 hashCode 方法？</p>
<p>如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖。</p>
<blockquote>
<p>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>
</blockquote>
<h4 id="Java-面向对象">Java 面向对象</h4>
<h5 id="1、面向对象和面向过程的区别">1、面向对象和面向过程的区别</h5>
<p>1、面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。</p>
<p>2、面向对象 ：面向对象易维护、易复用、易扩展。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，面向对象性能比面向过程低。</p>
]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第一天</title>
    <url>/blog/2020/07/29/%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h4 id="java的概念">java的概念</h4>
<p>Java是一种可以撰写跨平台应用程序的、面向对象的程序设计语言。简单说，Java就是一种语言，不过是一种针对jvm的语言，Java编译后是字节码，而jvm会把这些字节码解释成机器码，然后做出相应的动作。</p>
<p>而Java是一种特殊的解释型语言（首先将java的类文件编译成jvm能识别的字节码文件，然后针对热点方法，利用JTT即时编译技术，编译执行，而对于非热点方法，采用的则是解释执行）</p>
<p><img src="https://img-blog.csdn.net/20180816142243274?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5X2NzZG4xMzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p>
<p>java主要分三块，j2se：java的基础核心语言。j2me：java的微型模块，专门针对内存小，没有持续电源等小型设备。j2ee：java的企业模块，专门针对企业数据库服务器的连接维护。 手机用到的是用j2me所编出来的小程序</p>
<p>javac：Java编译器</p>
<p>java：Java解释器</p>
<p>jdb：Java调试器</p>
<p>javap：反编译</p>
<p>javadoc：文档生成器</p>
<p>利用编辑器编写Java源程序，源文件名：主类名.java</p>
<p>利用编译器将源程序编译成字节码，字节码文件名：源文件名.class</p>
<p>利用虚拟机（解释器）运行，工作过程：载入、代码校验、解释执行</p>
<h5 id="必须熟练掌握的命令">必须熟练掌握的命令</h5>
<p>javac命令：编译器将java源文件编译成字节码文件</p>
<p>java命令：JVM解释执行已经编译好的字节码文件</p>
<h4 id="java属于面向对象语言">java属于面向对象语言</h4>
<p>具备封装，继承，多态三大特性。</p>
<p>封装：每个类不对外暴露其构造和实现，只展示自身的功能与作用</p>
<p>继承：同一父类的子类共同持有父类的公有（非private）资源</p>
<p>多态：同一父类的子类对于父类公有方法或资源，可以具备不同的表达方式</p>
<h4 id="JVM、JRE-、JDK说明">JVM、JRE 、JDK说明</h4>
<p>A:什么是JVM</p>
<p>JVM是java虚拟机(JVM Java Virtual Machine)，java程序需要运行在虚拟机上，不同平台有自己的虚拟机，因此java语言可以跨平台</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm91eWFuZ3NpaGFpLmNuL0Z0SjNQYkJSZE5TYTFOYVVyOTZKbVVxMjRfeVM?x-oss-process=image/format,png" alt="image"></p>
<p>B:什么是JRE（运行环境）</p>
<p>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p>
<p>JRE:JVM+类库+运行工具（java.exe）。</p>
<p>C:什么是JDK（开发环境）</p>
<p>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。其中的开发工具：编译工具(javac.exe) 运行工具（java.exe） 打包工具(jar.exe)等</p>
<p>D:为什么JDK中包含一个JRE</p>
<p>JDK若无JRE则缺少虚拟机，而开发完的程序，需要运行一下看看效果。</p>
<p>E:JDK,JRE,JVM的作用和关系</p>
<p>JDK包含JRE 和开发工具包              JRE包含 核心类库和JVM</p>
<p>F：环境配置注意事项</p>
<p>JRE不可以安装在JDK内部（javac无法执行），CLASSPATH最好不配置</p>
<h4 id="java基本数据类型">java基本数据类型</h4>
<p><img src="https://img2020.cnblogs.com/blog/1453275/202004/1453275-20200417122916656-1751498856.png" alt="image"></p>
<p><strong>8大基本数据类型</strong></p>
<p>byte short int char  long double boolean float</p>
<p>精度从低到高：byte,short – int–(char) – long – float – double</p>
<p>低精度到高精度（隐式转换）：long a = 1 （系统默认整数为int类型）</p>
<p>高精度到低精度（强制转换）：byte b = (int)a (损失精度)</p>
<p>基本数据类型作为类成员时具有默认值</p>
<pre><code>boolean:false         char:0(空格)      byte:0              int:0          

short:0                   Long:0L           float:0.0f          double:0.0d
</code></pre>
<p><strong>注意:</strong></p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>转换的时候可能存在内存溢出，或者精度问题</li>
<li>除了int和char的包装类是Integer和Character，其他基本数据类型的包装类都是自己的首字母大写</li>
</ol>
<p><strong>基本数据类型和封装类的区别:</strong></p>
<ol>
<li>定义不同。封装类是对象，基本数据类型不是；</li>
<li>使用方式不同。封装类需要先new初始化，再通过JVM根据具体情况实例化后赋予定值，基本数据类型可以直接赋值，某些集合类型必须使用包装类，不能使用基本数据类型，如ArrayList<Integer></Integer></li>
<li>初始值不同。包装类初始值默认为null，基本数据类型根据类型不同而值不同；</li>
<li>存储方式和位置不用。封装类分拆引用和实例，引用存储在栈（stack），具体实例存储在堆（heap），基本数据类型存储在栈中（stack）。</li>
</ol>
<p><strong>为什么需要包装类:</strong></p>
<ol>
<li>包装类封装在java.lang包中；</li>
<li>基本数据类型没有toString()方法；</li>
<li>编码过程中只接收对象的情况，比如List中只能存入对象，不能存入基本数据类型；比如一个方法的参数是Object时，不能传入基本数据类型，但可以传入对应的包装类； 比如泛型等等。</li>
</ol>
<h4 id="JAVA运算符详解">JAVA运算符详解</h4>
<h5 id="1、算数运算符">1、算数运算符</h5>
<p>++算数运算符操作数必须是数值类型++</p>
<p>一元运算符:只有一个操作数</p>
<p>包括：正‘+’，负‘-’，自加‘++’，自减‘–‘</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">”++“和”--“用于数值变量之前，在赋值操作中，先对被”++“或”--“操作变量值先加1或者先减1，然后在进行其他的操作；</span><br><span class="line"></span><br><span class="line">"++"和”--“用于数值变量之后，在赋值操作中，先用被”++“或”--“的操作变量值进行其他的操作，然后在对其值加1或者减1。</span><br></pre></td></tr></table></figure>
<p>二元运算符:有两个操作数，运算符在两个操作数之间，用来完成加减乘除四则运算</p>
<p>包括：加’+’，减’-’，乘’*’，除’/’，取余’%’</p>
<p><strong>注意：</strong></p>
<ul>
<li>①数值计算中语法现象——“晋升”，即：byte、short和char(低于int的数据类型)进行算术运算后，结果会自动提升成int类型；</li>
<li>②两个char型运算时，自动转换为int型；当char与别的类型运算时，也会先自动转换为int型的，再做其它类型的自动转换；</li>
<li>③算数运算可以加入小括号&quot;()&quot;提高优先级，优先小括号内运算，再其他运算符运算；</li>
<li>④算数运算前操作数变量必须赋值，反之，报语法错误。</li>
</ul>
<h5 id="2、关系运算符">2、关系运算符</h5>
<p>等于’==’，不等于’!=’，大于’&gt;’，大于等于’&gt;=’，小于’&lt;’，小于等于’&lt;=’：<br>
<img src="https://img-blog.csdn.net/2018060909032670?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODEzNjUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p>
<p>关系运算符用于比较两个数值之间的大小，其运算结果为一个逻辑类型(boolean布尔类型)的数值</p>
<h5 id="3、逻辑运算符">3、逻辑运算符</h5>
<p>逻辑运算符要求操作数的数据类型为逻辑型，其运算结果也是逻辑型值。</p>
<p>逻辑运算的数据和逻辑运算符的运算结果是boolean类型。</p>
<p>逻辑与’&amp;&amp;’，逻辑或’||’，逻辑非’!’，逻辑异或’^’，逻辑与’&amp;’，逻辑或’|’</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&amp;(并且)	        有<span class="literal">false</span>则<span class="literal">false</span></span><br><span class="line"><span class="params">|(或者)     	有<span class="literal">true</span>则<span class="literal">true</span></span></span><br><span class="line"><span class="params">!(非)       	非<span class="literal">false</span>则<span class="literal">true</span>，非<span class="literal">true</span>则<span class="literal">false</span></span></span><br><span class="line"><span class="params">^(异或)	        相同为<span class="literal">false</span>，不同为<span class="literal">true</span></span></span><br><span class="line"><span class="params">&amp;&amp;(短路与)  	    有<span class="literal">false</span>则<span class="literal">false</span>,若&amp;&amp;左边表达式或者值为<span class="literal">false</span>则右边不进行计算</span></span><br><span class="line"><span class="params">|</span><span class="params">|(短路或)	    有<span class="literal">true</span>则<span class="literal">true</span>,若|</span><span class="params">|左边表达式或者值为<span class="literal">true</span>则右边不进行计算</span></span><br></pre></td></tr></table></figure>
<h4 id="JAVA流程控制">JAVA流程控制</h4>
<p><img src="https://img-blog.csdn.net/20180609090741370?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODEzNjUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p>
<h4 id="JAVA异常处理">JAVA异常处理</h4>
<p><img src="https://img-blog.csdnimg.cn/2019082621181768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MjM4MTQy,size_16,color_FFFFFF,t_70" alt="image"></p>
<p>Throwable是所有错误和异常的顶级父类，有两个重要的子类：Exception（异常）和 Error（错误）</p>
<p><strong>error 和 exception 的区别？</strong></p>
<p>Error 类一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢出等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。</p>
<p>Exception 类表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。</p>
<p>Exception分为编译时异常 CheckedException 和运行时异常 RuntimeException。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">当前方法知道如何处理该异常，则用 <span class="keyword">try</span>…<span class="keyword">catch</span> 块来处理该异常。</span><br><span class="line">当前方法不知道如何处理，则在定义该方法是声明 <span class="keyword">throws</span> 抛出该异常。</span><br><span class="line"></span><br><span class="line">被<span class="keyword">finally</span>控制的语句体一定会执行（前提是JVM没有停止）</span><br><span class="line">如果<span class="keyword">catch</span>里面有<span class="keyword">return</span>语句，<span class="keyword">finally</span>的代码会执行，会在在<span class="keyword">return</span>前执行。</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span>：</span><br><span class="line"><span class="number">1</span>） <span class="keyword">throw</span> 语句用在方法体内，表示抛出异常，由方法体内的语句处理。</span><br><span class="line"><span class="number">2</span>） <span class="keyword">throw</span> 是具体向外抛出异常的动作，所以它抛出的是一个异常实例，执行 <span class="keyword">throw</span> 一定是抛出了某种异常</span><br><span class="line"><span class="keyword">throws</span>：</span><br><span class="line"><span class="number">1</span>） <span class="keyword">throws</span> 语句是用在方法声明后面，表示如果抛出异常，由该方法的调用者来进行异常的处理。</span><br><span class="line"><span class="number">2</span>） <span class="keyword">throws</span> 主要是声明这个方法会抛出某种类型的异常，让它的使用者要知道需要捕获的异常的类型。</span><br><span class="line"><span class="number">3</span>） <span class="keyword">throws</span> 表示出现异常的一种可能性，并不一定会发生这种异常。</span><br></pre></td></tr></table></figure>
<h4 id="JAVA文件处理和IO流">JAVA文件处理和IO流</h4>
<p><strong>File文件类</strong></p>
<p>File类提供了对文件和目录的所有操作方法，大致可以分为：创建，删除，重命名，判断，获取。</p>
<blockquote>
<p>1、创建：创建文件（createNewFile()）和创建目录（mkdir()，mkdirs()）。返回值均是boolean类型，在创建前会自行判断文件或目录是否存在，不存在才去创建。创建目录时推荐使用mkdirs()方法，这个会自动帮你检查并创建不存在的上级目录<br>
2、删除：方法是delete()，返回值boolean，既可以删目录，也可以删文件。<br>
3、重命名：是由renameTo(Filedest)方法完成的，这个方法要求传入一个封装了新路径的File实例，返回值是布尔类型。JDK的开发者对其功能进行了进一步扩充：如果只是文件名不一样，那就是重命名；如果路径和文件名都不一样，那就是先剪切再重命名。<br>
4、判断：有多个方面的判断，首先是类型判断（是目录还是文件？）：isDirectory()，isFile()。其次还有文件状态判断：canRead()是否可读，public boolean canWrite()是否可写，public boolean isHidden() 是否隐藏。还有一个用的最多就是关于文件是否存在的判断：exists()。涉及到File类，常见的逻辑都是先判断文件或目录是否存在，再根据返回结果进一步操作。这些方法的返回值也都是布尔类型。<br>
5、获取：首先是路径的获取，这其中包括了绝对路径，相对路径，父目录的路径，分别是：getAbsolutePath，getPath()，getParent()；其次还有文件名的获取，包括父目录的文件名，分别是：getName()，getParent()；也可以后去父目录的File实例：getParentFile()；获取最后一次的修改时间（毫秒值）lastModified；获取文件大小（字节数）length()；可以获取指定目录下的所有文件夹/文件的名称或者File实例：list()，listFile()；甚至可以获取次抽象路径名指定的分区大小，已使用的字节数和未分配的字节数：getTotalSpace()，getUseSpace()，getFreeSpace()。</p>
</blockquote>
<h4 id="IO流">IO流</h4>
<p><img src="https://img-blog.csdnimg.cn/20190109180611675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5Njc0Nw==,size_16,color_FFFFFF,t_70" alt="image"></p>
<ol>
<li>按照流的方向分：输入流（InputStream）和输出流（OutputStream）</li>
<li>按照实现功能分：节点流（可以从或向一个特定的地方（节点）读写数据。例如FileReader）和处理流（是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写）</li>
<li>按照数据处理单元分：字节流和字符流。</li>
</ol>
<blockquote>
<p>字节流：多用于读取或书写二进制数据，这些类的基类为InputStream或OutputStream。可以处理所有以bit为单位储存的文件，也就是说可以处理所有的文件，但是在处理字符上的速度不如字符流。<br>
字符流：操作的是为了支持Unicode编码，用于字符国际化，一个字符占用两个字节，这些类的基类为Reader或Writer。该流只能处理字符，但处理字符速度很快</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2019010918550513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5Njc0Nw==,size_16,color_FFFFFF,t_70" alt="image"></p>
<p>拷贝文件，一个一个字节的拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"H:\\javaio\\copy01.txt"</span>);</span><br><span class="line">	FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"H:\\javaio\\copy02.txt"</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">    <span class="comment">//这里面是n等于读取到的字节，当读取到末尾时，返回的是-1，所以这里用！=-1来表示没有读到文件末尾</span></span><br><span class="line">	<span class="keyword">while</span>((n = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">		fos.write(n);</span><br><span class="line">	&#125;</span><br><span class="line">	fos.close();</span><br><span class="line">	fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用缓冲流进行拷贝，多个字节多个字节拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"H:\\javaio\\测试.avi"</span>));</span><br><span class="line">		BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"H:javaio\\测试copy1.avi"</span>));</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = bis.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">			bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		bos.close();</span><br><span class="line">		bis.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>使用转换流进行文件的拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"H:\\javaio\\copy01.txt"</span>));</span><br><span class="line">		OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"H:\\javaio\\copy02.txt"</span>));</span><br><span class="line">		<span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">			osw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		osw.close();</span><br><span class="line">		isr.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>使用字符流进行文件的拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"H:\\javaio\\copy01.txt"</span>);</span><br><span class="line">		FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"H:\\javaio\\copy02.txt"</span>);</span><br><span class="line">		<span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">			fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		fw.close();</span><br><span class="line">		fr.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>使用字符缓冲流行文件的拷贝</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> void t1() throws Exception&#123;</span><br><span class="line">    		BufferedReader br = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">"H:\\javaio\\copy01.txt"</span>));</span><br><span class="line">    		BufferedWriter bw = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(<span class="string">"H:\\javaio\\copy02.txt"</span>));</span><br><span class="line">    <span class="comment">//		char[] cbuf = new char[1024];</span></span><br><span class="line">    <span class="comment">//		int len;</span></span><br><span class="line">    <span class="comment">//		while((len=br.read(cbuf)) != -1)&#123;</span></span><br><span class="line">    <span class="comment">//			bw.write(cbuf, 0, len);</span></span><br><span class="line">    <span class="comment">//		&#125;</span></span><br><span class="line">    		<span class="comment">//BufferedReader提供了readLine方法，可以不再使用字节读取方式</span></span><br><span class="line">    		<span class="keyword">String</span> readline;</span><br><span class="line">    		<span class="keyword">while</span>((readline = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    			bw.write(readline);</span><br><span class="line">    			bw.<span class="keyword">new</span><span class="type">Line</span>();</span><br><span class="line">    		&#125;</span><br><span class="line">    		bw.close();</span><br><span class="line">    		br.close();</span><br><span class="line">    	&#125;</span><br></pre></td></tr></table></figure>
<h5 id="其他流">其他流</h5>
<p>ObjectInputStream和ObjectOutputStream（对象流）</p>
<blockquote>
<p>ObjectInputStream（对象输入流）继承于InputStream，ObjectOutputStream（对象输出流）继承于OutputStream。对象流是将对象的基本数据和图形实现持久存储。ObjectOutputStream实际是在对流进行序列化操作，ObjectInputStream实际是在对流进行反序列化操作，要实现序列化，必须实现Serializable接口，否则是无法进行序列化和反序列化的，如果对象中的属性加了transient和static关键字的话，则该属性不会被序列化。</p>
</blockquote>
<blockquote>
<p>补充：序列化与反序列化<br>
数据传输过程中，都会默认采用二进制文件的方式，因为计算机的底层识别方式就是二进制，不依赖任何运行环境或是程序设计语言，所以这是实现数据传输跨平台跨网络的基础。*序列化可以直接将java对象转化为一个字节序列，并能够在以后将这个字节序列完全恢复为原来的对象（反序列化），*这一过程甚至可以通过网络进行，这意味着序列化机制能自动弥补不同操作系统之间的差异。<br>
注：实现序列化的对象必须实现Serializable接口</p>
</blockquote>
<p>PrintStream和PrintWriter（打印流）</p>
<blockquote>
<p>PrintStream（可以将字节流封装成打印流）继承于FilterOutputStream，FilterOutputStream是继承于OutputStream的；PrintWriter（可以将字节流、字符流封装成打印流）继承于Writer的。</p>
</blockquote>
<h4 id="集合">集合</h4>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm91eWFuZ3NpaGFpLmNuL0ZzVHYyYU1zR2N2OE05UnN5eDZQT0JPR0tZMWc?x-oss-process=image/format,png" alt="image"></p>
]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用iframe引用html页面已经vue和html页面方法的调用</title>
    <url>/blog/2020/07/14/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8iframe%E5%BC%95%E7%94%A8html%E9%A1%B5%E9%9D%A2%E5%B7%B2%E7%BB%8Fvue%E5%92%8Chtml%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Vue中使用iframe引用html页面已经vue和html页面方法的调用">Vue中使用iframe引用html页面已经vue和html页面方法的调用</h3>
<p>当我们需要在vue中使用其他模块或者其他地方的一些html页面功能时，我们可以使用iframe去引用html页面，实现他们的交互</p>
<p>首先我们可以再vue页面中使用<iframe></iframe>标签引用html页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;iframe</span><br><span class="line">      name&#x3D;&quot;iframeMap&quot;</span><br><span class="line">      id&#x3D;&quot;iframeMapViewComponent&quot;</span><br><span class="line">      width&#x3D;&quot;100%&quot;</span><br><span class="line">      height&#x3D;&quot;470px&quot;</span><br><span class="line">      v-bind:src&#x3D;&quot;smgHtmlPath&quot;</span><br><span class="line">      frameborder&#x3D;&quot;0&quot;</span><br><span class="line">      scrolling&#x3D;&quot;no&quot;</span><br><span class="line">      ref&#x3D;&quot;iframeDom&quot;</span><br><span class="line">    &gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>其中src就是我们html的地址，我们可以在data中定义smgHtmlPath属性，在我们的created方法中初始化，为该属性赋予初始值</p>
<p>如果页面加载出来了，我们就可以开始vue页面和html页面的交互了</p>
<p>如果我们需要vue页面调用html页面方法，我们可以使用如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">   this.iframeWin &#x3D; this.$refs.iframeDom.contentWindow;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>首先在我们的mounted方法中得到iframe对象</p>
<p>在<strong>vue页面</strong>使用postMessage的API向html页面发送请求数据，因为我们的vue和html页面可能不在同一域名，所以会产生跨域的问题，这里我们使用的postMessage可以实现跨域，我这里在google和IE11测试都是可以跨域的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">loadSmgxmlModels(<span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.iframeWin.postMessage(<span class="keyword">data</span>,<span class="string">"*"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的data就是我们要传递给html页面的数据</p>
<p>“*”,这里代表的是所有地址可以接收到，我们也可以指定地址，例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p>在<strong>html页面</strong>的<SCRIPT></SCRIPT>标签中编写监听方法，用来监听我们的请求，获取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#39;message&#39;, function(ev) &#123;</span><br><span class="line">    &#x2F;&#x2F; 当我们是父子窗口进行消息传递时，可以使用此判断，只接受父窗口传递来的消息,</span><br><span class="line">    if (ev.source !&#x3D;&#x3D; window.parent) return;</span><br><span class="line">    var data &#x3D; ev.data;</span><br><span class="line">	console.log(&quot;vue传递的数据为：&quot;+data);</span><br><span class="line">  	&#x2F;&#x2F;下面可以调用我们html页面js中的方法，使用传递的数据进行操作了</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure>
<p>这里我们监听的就是message，可以获取数据。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE，localStorage（本地储存）储存数组对象，取出时产生错误</title>
    <url>/blog/2020/06/22/VUE%EF%BC%8ClocalStorage%EF%BC%88%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98%EF%BC%89%E5%82%A8%E5%AD%98%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8F%96%E5%87%BA%E6%97%B6%E4%BA%A7%E7%94%9F%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="VUE，localStorage（本地储存）储存数组对象，取出时产生错误">VUE，localStorage（本地储存）储存数组对象，取出时产生错误</h2>
<p>在开发中通过以下代码储存json数组对象时</p>
<p>数据格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"refId"</span>:<span class="string">"1"</span>,<span class="attr">"type"</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">"refId"</span>:<span class="string">"2"</span>,<span class="attr">"type"</span>:<span class="string">"2"</span>&#125;,&#123;<span class="attr">"refId"</span>:<span class="string">"3"</span>,<span class="attr">"type"</span>:<span class="string">"3"</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>储存：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">localStorage.setItem( <span class="string">"processBR"</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.$refs[<span class="string">"assemblyChildNodeTable"</span>].selectedRows));</span><br></pre></td></tr></table></figure>
<p>在其他页面取出时无法识别，导致通过for取出时，无法识别数组中的单个对象，而是直接当做字符串一个个输出，通过使用eval()转换后，可识别数组中的单个对象，按对象循环遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> relaAoprod = [];</span><br><span class="line"><span class="keyword">let</span> packJson = <span class="built_in">eval</span>(<span class="string">"("</span> + localStorage.getItem(<span class="string">"processBR"</span>) + <span class="string">")"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> packJson) &#123;</span><br><span class="line"> <span class="keyword">let</span> prod = &#123;&#125;;</span><br><span class="line"> prod.oid = packJson[i].refId; <span class="comment">//工艺节点id</span></span><br><span class="line"> prod.refType = packJson[i].type; <span class="comment">// 产品节点类型</span></span><br><span class="line"> (prod.prodType = <span class="keyword">this</span>.leftNodeData.type), <span class="comment">// 工艺节点的类型</span></span><br><span class="line"> (prod.relationType = <span class="keyword">this</span>.relationType), <span class="comment">// 关联关系 0-消耗，1-拆除</span></span><br><span class="line"> (prod.roId = <span class="keyword">this</span>.leftNodeData.id), <span class="comment">// 产品id</span></span><br><span class="line">  relaAoprod.push(prod);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>主页</title>
    <url>/blog/2020/04/25/%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="/blog/2020/04/25/%E5%9B%BE%E7%89%87/2020/04/25/%E5%9B%BE%E7%89%87/1.jpg" alt="images"></p>
]]></content>
      <tags>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>整理JDK8新特性</title>
    <url>/blog/2019/08/11/%E6%95%B4%E7%90%86JDK8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="整理JDK8新特性">整理JDK8新特性</h2>
<p><strong>目录</strong></p>
<p>static？default？lamda表达式？</p>
<p>常见的函数式接口</p>
<p>方法引用</p>
<p>Stream总结</p>
<p>Optinal用法介绍</p>
<p>新的日期API LocalDate | LocalTime | LocalDateTime</p>
<p><strong>static？default？lamda表达式？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wanke.microgrid.mgcc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NullAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//抽象方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">(String a)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//default方法</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"age"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">getAge1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//静态方法</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">static1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"static1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">static2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wanke.microgrid.mgcc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"aaaa"</span>;</span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        NullAnnotation annotation = (f) -&gt; System.out.println(f);</span><br><span class="line">        annotation.getName(a);</span><br><span class="line">        <span class="comment">//defalut方法属于对象的默认方法</span></span><br><span class="line">        annotation.getAge();</span><br><span class="line">        <span class="comment">//static属于类的方法</span></span><br><span class="line">        NullAnnotation.static1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aaaa</span><br><span class="line">age</span><br><span class="line">static1</span><br></pre></td></tr></table></figure>
<p>@FunctionalInterface标记接口为函数式接口，函数式接口有且只能有一个抽象方法，或许大家会问你不是写了两个抽象方法吗？java.lang.Object根对象有equals方法吧，所以实现该类的时候是不是不必须要实现这个接口（所有的类都是实现java.lang.Object的）。Lambda表达式是基于函数式接口的。</p>
<p><strong>常见的函数式接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wanke.microgrid.mgcc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Consumer消费型接口，有参无返回</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">(Integer x, Consumer&lt;Integer&gt; consumer)</span> </span>&#123;</span><br><span class="line">        consumer.accept(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//suplier供给型接口，无参有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSupplier</span><span class="params">(Supplier&lt;Integer&gt; supplier)</span> </span>&#123;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//函数式接口，有参有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">(Integer num, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</span><br><span class="line">        System.out.println(function.apply(num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//断言型接口，有参有返回值，返回值是boolean类型</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPredicate</span><span class="params">(Integer num, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</span><br><span class="line">        System.out.println(predicate.test(num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//介绍部分拓展接口</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//BinaryOperator (R apply(T t, U u) -&gt;两个输入，一个输出,而且类型一样)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binaryOperatorCompute</span><span class="params">(Integer para1, Integer para2, BinaryOperator&lt;Integer&gt; binaryOperator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用自定义BinaryOperator</span></span><br><span class="line">        System.out.println(binaryOperator.apply(para1, para2));</span><br><span class="line">        Comparator&lt;Integer&gt; cpt2 = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">        <span class="comment">//静态方法传入比较器生成BinaryOperator</span></span><br><span class="line">        BinaryOperator&lt;Integer&gt; min = BinaryOperator.minBy(cpt2);</span><br><span class="line">        System.out.println(min.apply(para1, para2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//toIntFunction (int applyAsInt(T t, U u) -&gt;两个输入，一个int输出)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testToIntFunction</span><span class="params">(Integer para1, Integer para2, ToIntBiFunction&lt;Integer, Integer&gt; toIntBiFunction)</span> </span>&#123;</span><br><span class="line">        System.out.println(toIntBiFunction.applyAsInt(para1, para2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//BiFunction (R apply(T t, U u) -&gt;两个输入，一个输出)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBi</span><span class="params">(Integer para1,Integer para2,BiFunction&lt;Integer, Integer, Integer&gt; biFunction, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; newBi = biFunction.andThen(function);</span><br><span class="line">        System.out.println(newBi.apply(para1,para2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//如何看出输入输出，以BiFunction为例</span></span><br><span class="line">    <span class="comment">//源码如下:</span></span><br><span class="line"><span class="comment">//package java.util.function;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//import java.util.Objects;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// /**</span></span><br><span class="line"><span class="comment">// * Represents a function that accepts two arguments and produces a result.</span></span><br><span class="line"><span class="comment">// * This is the two-arity specialization of &#123;@link Function&#125;.</span></span><br><span class="line"><span class="comment">// *</span></span><br><span class="line"><span class="comment">// * &lt;p&gt;This is a &lt;a href="package-summary.html"&gt;functional interface&lt;/a&gt;</span></span><br><span class="line"><span class="comment">// * whose functional method is &#123;@link #apply(Object, Object)&#125;.</span></span><br><span class="line"><span class="comment">// *</span></span><br><span class="line"><span class="comment">// * @param &lt;T&gt; the type of the first argument to the function</span></span><br><span class="line"><span class="comment">// * @param &lt;U&gt; the type of the second argument to the function</span></span><br><span class="line"><span class="comment">// * @param &lt;R&gt; the type of the result of the function</span></span><br><span class="line"><span class="comment">// *</span></span><br><span class="line"><span class="comment">// * @see Function</span></span><br><span class="line"><span class="comment">// * @since 1.8</span></span><br><span class="line"><span class="comment">// */</span></span><br><span class="line"><span class="comment">// @FunctionalInterface</span></span><br><span class="line"><span class="comment">// public interface BiFunction&lt;T, U, R&gt; &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// /**</span></span><br><span class="line"><span class="comment">// * Applies this function to the given arguments.</span></span><br><span class="line"><span class="comment">// *</span></span><br><span class="line"><span class="comment">// * @param t the first function argument</span></span><br><span class="line"><span class="comment">// * @param u the second function argument</span></span><br><span class="line"><span class="comment">// * @return the function result</span></span><br><span class="line"><span class="comment">// */</span></span><br><span class="line"><span class="comment">// R apply(T t, U u);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// /**</span></span><br><span class="line"><span class="comment">// * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">// * its input, and then applies the &#123;@code after&#125; function to the result.</span></span><br><span class="line"><span class="comment">// * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">// * the caller of the composed function.</span></span><br><span class="line"><span class="comment">// *</span></span><br><span class="line"><span class="comment">// * @param &lt;V&gt; the type of output of the &#123;@code after&#125; function, and of the</span></span><br><span class="line"><span class="comment">// * composed function</span></span><br><span class="line"><span class="comment">// * @param after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">// * @return a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">// * applies the &#123;@code after&#125; function</span></span><br><span class="line"><span class="comment">// * @throws NullPointerException if after is null</span></span><br><span class="line"><span class="comment">// */</span></span><br><span class="line"><span class="comment">// default &lt;V&gt; java.util.function.BiFunction&lt;T, U, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123;</span></span><br><span class="line"><span class="comment">// Objects.requireNonNull(after);</span></span><br><span class="line"><span class="comment">// return (T t, U u) -&gt; after.apply(apply(t, u));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//函数式接口类型的唯一抽象方法 R apply(T t, U u);显然是量输入一输出，而且是泛型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testConsumer(<span class="number">1</span>, x -&gt; System.out.println(x));</span><br><span class="line">        testSupplier(() -&gt; getInteger());</span><br><span class="line">        testFunction(<span class="number">100</span>, x -&gt; x + <span class="number">100</span>);</span><br><span class="line">        testPredicate(<span class="number">100</span>, x -&gt; x.equals(<span class="number">100</span>));</span><br><span class="line">        binaryOperatorCompute(<span class="number">1</span>, <span class="number">2</span>, (x, y) -&gt; x + y);</span><br><span class="line">        testToIntFunction(<span class="number">3</span>, <span class="number">4</span>, (x, y) -&gt; x + y + <span class="number">1</span>);</span><br><span class="line">        testBi(<span class="number">5</span>,<span class="number">9</span>,(x,y)-&gt;&#123;<span class="keyword">int</span> z = x+y;<span class="keyword">return</span> z;&#125;,x-&gt;x + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>
<p>总之jdk8提供了一种方便的方式让我们传递函数，就像传递参数一样，大家对照着可以看看js的回调。</p>
<p><strong>方法引用</strong></p>
<p>定义了4个方法的Car这个类作为例子，区分Java中支持的4种不同的方法引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">( <span class="keyword">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> supplier.get();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">( <span class="keyword">final</span> Car car )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println( <span class="string">"Collided "</span> + car.toString() );</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">( <span class="keyword">final</span> Car another )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println( <span class="string">"Following the "</span> + another.toString() );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println( <span class="string">"Repaired "</span> + <span class="keyword">this</span>.toString() );</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一种方法引用是构造器引用，它的语法是Class::new，或者更一般的Class&lt; T &gt;::new。请注意构造器没有参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Car car = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line"><span class="keyword">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure>
<p>第二种方法引用是静态方法引用，它的语法是Class::static_method。请注意这个方法接受一个Car类型的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure>
<p>第三种方法引用是特定类的任意对象的方法引用，它的语法是Class::method。请注意，这个方法没有参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure>
<p>第四种方法引用是特定对象的方法引用，它的语法是instance::method。请注意，这个方法接受一个Car类型的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Car police = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line">cars.forEach( police::follow )</span><br></pre></td></tr></table></figure>
<p>方法和函数都有输入输出，本质上是类似的，所以我们可以引用方法来代替lamda表达式，这样或许好理解一点。</p>
<p><strong>Stream总结</strong></p>
<p>Stream的操作符大体上分为两种：中间操作符和终止操作符</p>
<p><strong>中间操作符</strong></p>
<p>对于数据流来说，中间操作符在执行制定处理程序后，数据流依然可以传递给下一级的操作符。</p>
<p>中间操作符包含8种(排除了parallel,sequential,这两个操作并不涉及到对数据流的加工操作)：</p>
<p>1.map(mapToInt,mapToLong,mapToDouble) 转换操作符，把比如A-&gt;B，这里默认提供了转int，long，double的操作符。</p>
<p>2.flatmap(flatmapToInt,flatmapToLong,flatmapToDouble) 拍平操作比如把 int[]{2,3,4} 拍平 变成 2，3，4 也就是从原来的一个数据变成了3个数据，这里默认提供了拍平成int,long,double的操作符。</p>
<p>3.limit 限流操作，比如数据流中有10个 我只要出前3个就可以使用。</p>
<p>4.distint 去重操作，对重复元素去重，底层使用了equals方法。</p>
<p>5.filter 过滤操作，把不想要的数据过滤。</p>
<p>6.peek 挑出操作，如果想对数据进行某些操作，如：读取、编辑修改等。</p>
<p>skip 跳过操作，跳过某些元素。</p>
<p>7.sorted(unordered) 排序操作，对元素排序，前提是实现Comparable接口，当然也可以自定义比较器。</p>
<p><strong>终止操作符</strong></p>
<p>数据经过中间加工操作，就轮到终止操作符上场了；终止操作符就是用来对数据进行收集或者消费的，数据到了终止操作这里就不会向下流动了，终止操作符只能使用一次。</p>
<p>1.collect 收集操作，将所有数据收集起来，这个操作非常重要，官方的提供的</p>
<p>Collectors 提供了非常多收集器，可以说Stream 的核心在于Collectors。</p>
<p>2.count 统计操作，统计最终的数据个数。</p>
<p>3.findFirst、findAny 查找操作，查找第一个、查找任何一个 返回的类型为Optional。</p>
<p>4.noneMatch、allMatch、anyMatch 匹配操作，数据流中是否存在符合条件的元素 返回值为bool 值。</p>
<p>5.min、max 最值操作，需要自定义比较器，返回数据流中最大最小的值。</p>
<p>6.reduce 规约操作，将整个数据流的值规约为一个值，count、min、max底层就是使用reduce。</p>
<p>7.forEach、forEachOrdered 遍历操作，这里就是对最终的数据进行消费了。</p>
<p>8.toArray 数组操作，将数据流的元素转换成数组。</p>
<p>parallel会利用多核，但要注意线程安全(利用外部变量时可能会造成线程安全问题，外部变量指的是流操作外面申明的变量)</p>
<p><strong>Optinal用法介绍</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Optional.of()或者Optional.ofNullable()：创建Optional对象，差别在于of不允许参数是null，而ofNullable则无限制。</span></span><br><span class="line">        <span class="comment">// 参数不能是null</span></span><br><span class="line">        Optional&lt;Integer&gt; optional1 = Optional.of(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数可以是null</span></span><br><span class="line">        Optional&lt;Integer&gt; optional2 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">// 参数可以是非null</span></span><br><span class="line">        Optional&lt;Integer&gt; optional3 = Optional.ofNullable(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Optional.empty()：所有null包装成的Optional对象：</span></span><br><span class="line">        Optional&lt;Integer&gt; optional4 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional5 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(optional4 == optional5);<span class="comment">// true</span></span><br><span class="line">        System.out.println(optional5 == Optional.&lt;Integer&gt;empty());<span class="comment">// true</span></span><br><span class="line">        Object o1 = Optional.&lt;Integer&gt;empty();</span><br><span class="line">        Object o2 = Optional.&lt;String&gt;empty();</span><br><span class="line">        System.out.println(o1 == o2);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//isPresent()：判断值是否存在</span></span><br><span class="line">        Optional&lt;Integer&gt; optional6 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional7 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// isPresent判断值是否存在</span></span><br><span class="line">        System.out.println(optional6.isPresent() == <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(optional7.isPresent() == <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; optional8 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional9 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 如果不是null,调用Consumer</span></span><br><span class="line">        optional8.ifPresent(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer t)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"value is "</span> + t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// null,不调用Consumer</span></span><br><span class="line">        optional9.ifPresent(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer t)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"value is "</span> + t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//orElse(value)：如果optional对象保存的值不是null，则返回原来的值，否则返回value</span></span><br><span class="line">        Optional&lt;Integer&gt; optional10 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional11 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// orElse</span></span><br><span class="line">        System.out.println(optional10.orElse(<span class="number">1000</span>) == <span class="number">1</span>);<span class="comment">// true</span></span><br><span class="line">        System.out.println(optional11.orElse(<span class="number">1000</span>) == <span class="number">1000</span>);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//orElseGet(Supplier supplier)：功能与orElse一样，只不过orElseGet参数是一个对象</span></span><br><span class="line">        Optional&lt;Integer&gt; optional12 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional13 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> System.out.println(optional12.orElseGet(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        &#125;) == <span class="number">1</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(optional3.orElseGet(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        &#125;) == <span class="number">1000</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//orElseThrow()：值不存在则抛出异常，存在则什么不做，有点类似Guava的Precoditions</span></span><br><span class="line">        Optional&lt;Integer&gt; optional14 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional15 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">optional14.orElseThrow(()-&gt;&#123;<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            optional15.orElseThrow(()-&gt;&#123;<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IllegalStateException e )</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter(Predicate)：判断Optional对象中保存的值是否满足Predicate，并返回新的Optional。</span></span><br><span class="line">        Optional&lt;Integer&gt; optional16 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional17 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> Optional&lt;Integer&gt; filter1 = optional16.filter((a) -&gt; a == <span class="keyword">null</span>);</span><br><span class="line">        Optional&lt;Integer&gt; filter2 = optional16.filter((a) -&gt; a == <span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; filter3 = optional17.filter((a) -&gt; a == <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(filter1.isPresent());<span class="comment">// false</span></span><br><span class="line">        System.out.println(filter2.isPresent());<span class="comment">// true</span></span><br><span class="line">        System.out.println(filter2.get().intValue() == <span class="number">1</span>);<span class="comment">// true</span></span><br><span class="line">        System.out.println(filter3.isPresent());<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map(Function)：对Optional中保存的值进行函数运算，并返回新的Optional(可以是任何类型)</span></span><br><span class="line">        Optional&lt;Integer&gt; optional18 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line">        Optional&lt;Integer&gt; optional19 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; str1Optional = optional18.map((a) -&gt; <span class="string">"key"</span> + a);</span><br><span class="line">        Optional&lt;String&gt; str2Optional = optional19.map((a) -&gt; <span class="string">"key"</span> + a);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//flatMap()：功能与map()相似，差别请看如下代码。flatMap方法与map方法类似，区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。</span></span><br><span class="line">        Optional&lt;Integer&gt; optional1 = Optional.ofNullable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Optional&lt;String&gt;&gt; str3Optional = optional1.map((a) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.&lt;String&gt;of(<span class="string">"key"</span> + a);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"> Optional&lt;String&gt; str4Optional = optional1.flatMap((a) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.&lt;String&gt;of(<span class="string">"key"</span> + a);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"> System.out.println(str3Optional.get().get());<span class="comment">// key1</span></span><br><span class="line">        System.out.println(str4Optional.get());<span class="comment">// key1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Optional应用示例</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        Insurance insurance = <span class="keyword">new</span> Insurance();</span><br><span class="line">        insurance.setName(<span class="string">"aa"</span>);</span><br><span class="line">        car.setInsurance(insurance);</span><br><span class="line">        person.setCar(car);</span><br><span class="line">        String insuranceName = Optional.ofNullable(person)</span><br><span class="line">                .map((p) -&gt; p.getCar())</span><br><span class="line">                .map(c -&gt; c.getInsurance())</span><br><span class="line">                .map(i -&gt; i.getName()).orElse(<span class="string">"unknown"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(insuranceName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> car;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.car = car;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Insurance insurance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Insurance <span class="title">getInsurance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> insurance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInsurance</span><span class="params">(Insurance insurance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.insurance = insurance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Insurance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>新的日期API LocalDate | LocalTime | LocalDateTime</strong></p>
<p>新的日期API都是不可变的，更使用于多线程的使用环境中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 从默认时区的系统时钟获取当前的日期时间。不用考虑时区差</span></span><br><span class="line">    LocalDateTime date = LocalDateTime.now();</span><br><span class="line">    <span class="comment">//2018-07-15T14:22:39.759</span></span><br><span class="line">    System.out.println(date);</span><br><span class="line"></span><br><span class="line">    System.out.println(date.getYear());</span><br><span class="line">    System.out.println(date.getMonthValue());</span><br><span class="line">    System.out.println(date.getDayOfMonth());</span><br><span class="line">    System.out.println(date.getHour());</span><br><span class="line">    System.out.println(date.getMinute());</span><br><span class="line">    System.out.println(date.getSecond());</span><br><span class="line">    System.out.println(date.getNano());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动创建一个LocalDateTime实例</span></span><br><span class="line">    LocalDateTime date2 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>);</span><br><span class="line">    System.out.println(date2);</span><br><span class="line">    <span class="comment">// 进行加操作，得到新的日期实例</span></span><br><span class="line">    LocalDateTime date3 = date2.plusDays(<span class="number">12</span>);</span><br><span class="line">    System.out.println(date3);</span><br><span class="line">    <span class="comment">// 进行减操作，得到新的日期实例</span></span><br><span class="line">    LocalDateTime date4 = date3.minusYears(<span class="number">2</span>);</span><br><span class="line">    System.out.println(date4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// Duration:计算两个时间之间的间隔</span></span><br><span class="line">        <span class="comment">// Period：计算两个日期之间的间隔</span></span><br><span class="line"></span><br><span class="line">   Instant ins1 = Instant.now();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Instant ins2 = Instant.now();</span><br><span class="line">        Duration dura = Duration.between(ins1, ins2);</span><br><span class="line">        System.out.println(dura);</span><br><span class="line">        System.out.println(dura.toMillis());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        LocalTime localTime2 = LocalTime.now();</span><br><span class="line">        Duration du2 = Duration.between(localTime, localTime2);</span><br><span class="line">        System.out.println(du2);</span><br><span class="line">        System.out.println(du2.toMillis());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDate localDate =LocalDate.now();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalDate localDate2 = LocalDate.of(<span class="number">2016</span>,<span class="number">12</span>,<span class="number">12</span>);</span><br><span class="line">        Period pe = Period.between(localDate, localDate2);</span><br><span class="line">        System.out.println(pe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// temperalAdjust 时间校验器</span></span><br><span class="line">        <span class="comment">// 例如获取下周日 下一个工作日</span></span><br><span class="line">        LocalDateTime ldt1 = LocalDateTime.now();</span><br><span class="line">        System.out.println(ldt1);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取一年中的第一天</span></span><br><span class="line">        LocalDateTime ldt2 = ldt1.withDayOfYear(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ldt2);</span><br><span class="line">        <span class="comment">// 获取一个月中的第一天</span></span><br><span class="line">        LocalDateTime ldt3 = ldt1.withDayOfMonth(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ldt3);</span><br><span class="line"></span><br><span class="line">        LocalDateTime ldt4 = ldt1.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));</span><br><span class="line">        System.out.println(ldt4);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取下一个工作日</span></span><br><span class="line">        LocalDateTime ldt5 = ldt1.with((t) -&gt; &#123;</span><br><span class="line">            LocalDateTime ldt6 = (LocalDateTime)t;</span><br><span class="line">            DayOfWeek dayOfWeek = ldt6.getDayOfWeek();</span><br><span class="line">            <span class="keyword">if</span> (DayOfWeek.FRIDAY.equals(dayOfWeek))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt6.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (DayOfWeek.SATURDAY.equals(dayOfWeek))&#123;</span><br><span class="line">                <span class="keyword">return</span> ldt6.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ldt6.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(ldt5);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// DateTimeFormatter: 格式化时间/日期</span></span><br><span class="line">        <span class="comment">// 自定义格式</span></span><br><span class="line">        LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">        String strDate1 = ldt.format(formatter);</span><br><span class="line">        String strDate = formatter.format(ldt);</span><br><span class="line">        System.out.println(strDate);</span><br><span class="line">        System.out.println(strDate1);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用api提供的格式</span></span><br><span class="line">        DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;</span><br><span class="line">        LocalDateTime ldt2 = LocalDateTime.now();</span><br><span class="line">        String strDate3 = dtf.format(ldt2);</span><br><span class="line">        System.out.println(strDate3);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 解析字符串to时间</span></span><br><span class="line">        DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        LocalDateTime time = LocalDateTime.now();</span><br><span class="line">        String localTime = df.format(time);</span><br><span class="line">        LocalDateTime ldt4 = LocalDateTime.parse(<span class="string">"2017-09-28 17:07:05"</span>,df);</span><br><span class="line">        System.out.println(<span class="string">"LocalDateTime转成String类型的时间："</span>+localTime);</span><br><span class="line">        System.out.println(<span class="string">"String类型的时间转成LocalDateTime："</span>+ldt4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ZoneTime ZoneDate ZoneDateTime</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDateTime now = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        LocalDateTime now2 = LocalDateTime.now();</span><br><span class="line">        ZonedDateTime zdt = now2.atZone(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">        System.out.println(zdt);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">        set.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>LocalDate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localDateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取当前日期,只含年月日 固定格式 yyyy-MM-dd 2018-05-04</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据年月日取日期，5月就是5，</span></span><br><span class="line">        LocalDate oldDate = LocalDate.of(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 根据字符串取：默认格式yyyy-MM-dd，02不能写成2</span></span><br><span class="line">        LocalDate yesteday = LocalDate.parse(<span class="string">"2018-05-03"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不是闰年 传入29号也会报错</span></span><br><span class="line">        LocalDate.parse(<span class="string">"2018-02-29"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转换常用,第一天或者最后一天...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localDateTransferTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2018-05-04</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="comment">// 取本月第1天：2018-05-01</span></span><br><span class="line">        LocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth());</span><br><span class="line">        <span class="comment">// 取本月第2天：2018-05-02</span></span><br><span class="line">        LocalDate secondDayOfThisMonth = today.withDayOfMonth(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 取本月最后一天，再也不用计算是28，29，30还是31：2018-05-31</span></span><br><span class="line">        LocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        <span class="comment">// 取下一天：2018-06-01</span></span><br><span class="line">        LocalDate firstDayOf2015 = lastDayOfThisMonth.plusDays(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 取2018年10月第一个周三 so easy?：2018-10-03</span></span><br><span class="line">        LocalDate thirdMondayOf2018 = LocalDate.parse(<span class="string">"2018-10-01"</span>).with(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>LocalTime</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localTimeTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//16:25:46.448(纳秒值)</span></span><br><span class="line">        LocalTime todayTimeWithMillisTime = LocalTime.now();</span><br><span class="line">        <span class="comment">//16:28:48 不带纳秒值</span></span><br><span class="line">        LocalTime todayTimeWithNoMillisTime = LocalTime.now().withNano(<span class="number">0</span>);</span><br><span class="line">        LocalTime time1 = LocalTime.parse(<span class="string">"23:59:59"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>LocalDateTime</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转化为时间戳 毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> time1 = LocalDateTime.now().toInstant(ZoneOffset.of(<span class="string">"+8"</span>)).toEpochMilli();</span><br><span class="line">        System.out.println(time1);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//时间戳转化为localdatetime</span></span><br><span class="line">        DateTimeFormatter df= DateTimeFormatter.ofPattern(<span class="string">"YYYY-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(df.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(time1),ZoneId.of(<span class="string">"Asia/Shanghai"</span>))));</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次java使用processBuilder调用exe执行文件处理的代码</title>
    <url>/blog/2019/06/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1java%E4%BD%BF%E7%94%A8processBuilder%E8%B0%83%E7%94%A8exe%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="记录一次java使用processBuilder调用exe执行文件处理的代码">记录一次java使用processBuilder调用exe执行文件处理的代码</h3>
<p>ProcessBuilder 是jdk1.5以后的类，在这以前一直是直接用process。<br>
具体区别和联系可以查看下方博客<br>
<a href="https://honeypps.com/java/process-builder-quick-start/" target="_blank" rel="noopener">https://honeypps.com/java/process-builder-quick-start/</a></p>
<p>该方法调用的是C#开发的一个exe，dll用来生成PDF文件，我们需要给该方法传递参数，我这里path传递的是一个字符串，传递的信息是看你的exe需要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">generatePdfFromExe</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">			String exePath=<span class="string">"E:\\ITextSharpTest\\ITextSharpTest.exe"</span>;</span><br><span class="line">            BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line">            BufferedReader brError=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行exe ,exePath可以为字符串(exe存放路径)也可为数组</span></span><br><span class="line">                log.info(<span class="string">"执行exe文件！"</span>);</span><br><span class="line">                ProcessBuilder pr= <span class="keyword">new</span> ProcessBuilder(exePath,path);</span><br><span class="line">			    process p=pr.start();</span><br><span class="line">                String line = <span class="keyword">null</span>;</span><br><span class="line">                br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</span><br><span class="line">                brError = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getErrorStream()));</span><br><span class="line">                log.info(<span class="string">"开始获取子进程输出流信息和错误流信息"</span>);</span><br><span class="line">                <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>  || (line = brError.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//输出exe输出的信息以及错误信息</span></span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">"调用exe方法完成"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.info(<span class="string">"调用exe生成PDF过程出现错误"</span>);</span><br><span class="line">                log.info(<span class="string">"错误信息为:"</span>+e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        br.close();</span><br><span class="line">                        log.info(<span class="string">"释放输出流！"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"调用exe生成PDF成功！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud服务网关 zuul 快速入门</title>
    <url>/blog/2019/06/21/Spring%20Cloud%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%20zuul%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="前言：">前言：</h2>
<p>上篇博客中，我们快速搭建了一个Spring Cloud微服务的dome，那么这个博客就是在哪个dome的基础上开始讲解一下服务网关zuul的使用，zuul的作用我在我的前面博客中也有提到，这里就不多说。<br>
上次和这次dome的代码已上传到github，需要自取：</p>
<blockquote>
<p><a href="https://github.com/xuhao008/Spring-Cloud" target="_blank" rel="noopener">https://github.com/xuhao008/Spring-Cloud</a></p>
</blockquote>
<h2 id="一、Zuul网关的基本知识">一、Zuul网关的基本知识</h2>
<p>首先网关顾名思义，就像我们生活中的海关，你必须具备一定条件就可以通过，所有我们的网关也就是这样，主要是过滤或拦截，当我们的用户访问服务的时候，通过网关的验证，然后转发到相对应的服务。</p>
<p><strong>Zuul过滤器生命周期</strong><br>
Zuul大部分功能都是通过过滤器来实现的，Zuul定义了4种标准的过滤器类型，这些过滤器类型对应于请求的典型生命周期：</p>
<ol>
<li>pre: 这种过滤器在请求被路由之前调用。可利用这种过滤器实现身份验证、在集群中选择请求的微服务，记录调试信息等。</li>
<li>routing: 这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用apache httpclient或netflix ribbon请求微服务。</li>
<li>post: 这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的http header、收集统计信息和指标、将响应从微服务发送给客户端等。</li>
<li>error: 在其他阶段发送错误时执行该过滤器。</li>
</ol>
<h2 id="二、快速搭建zuul网关">二、快速搭建zuul网关</h2>
<p>创建一个Maven子项目<br>
<img src="https://img-blog.csdnimg.cn/20191214101800423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191214101824718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>选择项目创建完毕，我们就来编写pom.xml，yml配置和启动类</strong><br>
1、导入maven坐标依赖<br>
<strong>pom.xml</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;!--eureka客户端--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!--zuul网关--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>2、在resources下创建application.ym配置文件，并编写<br>
<strong>application.yml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7777</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8081/eureka</span></span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: <span class="keyword">true</span></span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    #服务名称，随便取</span><br><span class="line">    service-a:</span><br><span class="line">      #用什么路径取服务对应的服务</span><br><span class="line">      path: /a<span class="comment">/**</span></span><br><span class="line"><span class="comment">      #serviceId，对应了服务名称</span></span><br><span class="line"><span class="comment">      serviceId: service-a</span></span><br><span class="line"><span class="comment">      #url: http://localhost:8888/ #也可以使用请求路径，不用服务名称</span></span><br><span class="line"><span class="comment">      service-b:</span></span><br><span class="line"><span class="comment">      path: /b/**</span></span><br><span class="line"><span class="comment">      serviceId: service-b</span></span><br></pre></td></tr></table></figure>
<p>3、编写启动类<br>
<strong>ZuulApplication.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写完毕以后，就可以启动我们的服务和网关了<br>
<img src="https://img-blog.csdnimg.cn/20191214112140442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191214112151898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
然后我们访问：<a href="http://localhost:7777/b/hello" target="_blank" rel="noopener">http://localhost:7777/b/hello</a><br>
<img src="https://img-blog.csdnimg.cn/20191214112525320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="三、设置网关的过滤器">三、设置网关的过滤器</h2>
<p>刚刚我们已经成功搭建和设置了网关，虽然可以通过网关服务其他服务了，但是我们都是网关最重要的功能是拦截和过滤，我们刚刚还没有涉及到，选择我们一起来看看。</p>
<p>首先我们创建一个类，继承ZuulFilter ，实现它的4个方法</p>
<ol>
<li>filterType(),用来设置过滤类型</li>
<li>filterOrder(), 设置过过滤器优先级,数字越大，优先级越低</li>
<li>shouldFilter，返回true或false，表示是否开启过滤</li>
<li>run(),一些自定义的过滤信息方法</li>
</ol>
<p>下面我们开始编写：<br>
创建com.xkkj.filter包，创建TokenFilter.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以在请求被路由之前调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// filter执行顺序，通过数字指定 ,优先级为0，数字越大，优先级越低</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否执行该过滤器，此处为true，说明需要过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext context  = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context .getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求的参数</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (token!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//对请求进行路由</span></span><br><span class="line">            context .setSendZuulResponse(<span class="keyword">true</span>);</span><br><span class="line">            context .setResponseStatusCode(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不对其进行路由</span></span><br><span class="line">            context .setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context .setResponseStatusCode(<span class="number">400</span>);</span><br><span class="line">            context .setResponseBody(<span class="string">"ERROR"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们判断token是否有值，如果没有就抛出error。<br>
下面我们运行看看：<br>
地址：<a href="http://localhost:7777/b/hello" target="_blank" rel="noopener">http://localhost:7777/b/hello</a><br>
<img src="https://img-blog.csdnimg.cn/2019121414010991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
地址：<a href="http://localhost:7777/b/hello?token=1" target="_blank" rel="noopener">http://localhost:7777/b/hello?token=1</a><br>
<img src="https://img-blog.csdnimg.cn/20191214140121351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
地址：<a href="http://localhost:9999/hello" target="_blank" rel="noopener">http://localhost:9999/hello</a><br>
<img src="https://img-blog.csdnimg.cn/20191214140325628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
这里我们可以看到，如果通过zuul网关去访问你对应的服务，就会触发你的过滤器，如果你是直接访问你对应服务的地址，过滤就不会生效。<br>
而这种网关转发之后的请求 就叫做反向代理你可以隐藏你本地的服务器的真实地址 只暴露给外界网关的地址 然后由网关转发给服务器。</p>
]]></content>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是微服务，为什么要使用微服务架构</title>
    <url>/blog/2019/05/31/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近这几年微服务比较火，很多技术公司对招聘java工程师，都是以有微服务架构开发经验的求职者优先，仿佛不谈点微服务相关的技术，都显得不是那么主流了。</p>
<h2 id="一：什么是微服务">一：什么是微服务</h2>
<p>1、 微服务的概念源于2014年3月Martin Fowler所写的一篇文章“Microservices”(<a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">http://martinfowler.com/articles/microservices.html</a>)。<br>
2、微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。<br>
3、如果要用比较通俗的解释，我觉得可以用如今手机行业的手机生产制作来形容，如今各个手机厂商每台手机几乎都是各大厂商技术的集合体，就比如一台小米手机，cpu可能来自高通，屏幕来自三星，摄像头来自索尼等等，手机每个部分都由不同厂商提供，强强联合，才能制作一台真正优秀的手机，而微服务就像这样，每个功能点单独完成，最后组成一个强大的项目。</p>
<h2 id="二、为什么使用微服务">二、为什么使用微服务</h2>
<p>提到为什么使用微服务架构就应该先了解一下一体化架构。<br>
<strong>1、什么是一体化架构？</strong><br>
答：一体化架构顾名思义，将应用各层打成一个包来部署。为了让代码正常工作，一体化应用的所有组件缺一不可，各部分高度依赖。比如我们常见的普通web项目，一般分为表现层，业务逻辑层，数据访问层，所有代码都放在一个代码库中，某一层的代码变化都影响整个项目的构建和部署。<br>
<strong>2、为什么使用微服务架构</strong><br>
答：微服务架构其实就是一种架构风格，我们将整个项目划分为多个独立的小项目，也就是我们俗称的微服务，但是微服务的“’微”并没有明确的定义，可以理解为每个微服务都单独处理某个功能模块，可以独立开发、测试、部署、监控和扩展，甚至可以用不同的编程语言开发它们。它有利于我们平时项目的开发，解决了一体化架构项目难以扩展，开发周期长，故障级联等问题，这也是微服务近几年越来越流行的一个原因。</p>
<p><strong>三、微服务有什么优缺点</strong><br>
<strong>1、优点：</strong></p>
<ul>
<li>独立开发部署服务</li>
<li>速度和敏捷性</li>
<li>更高的代码质量</li>
<li>获得围绕业务功能创建/组织的代码</li>
<li>改善故障隔离。一个服务宕机不会影响其他的服务</li>
<li>易于规模化开发，多个开发团队可以并行开发，每个团队负责一项服务</li>
<li>更容易扩展</li>
<li>可以使用不同的语言</li>
</ul>
<p><strong>2、缺点</strong></p>
<ul>
<li>测试工作更加困难</li>
<li>服务调用跨更多节点，分布式事务数据不一致性可能更大。</li>
<li>部署复杂，成本高</li>
<li>开发人员要处理分布式系统的复杂性，提高了开发的复杂性</li>
<li>服务调用跨网络，增加网络IO，降低性能。</li>
</ul>
<p><strong>3</strong>、这里也只是简单的列举了一些优缺点，如果要详细了解百度上很多，也很详细。</p>
<h2 id="四、总结：">四、总结：</h2>
<p>上面也只是比较简单说了一下微服务，其实无论哪种技术，哪种架构，有优点，也必有缺点，在开发中，这些问题我们其实天天都可以遇到，就比如常用的一些集合类型，效率高的，线程就不一定安全，线程安全的效率也不一定高。技术是死的，但是人是活的，我们只有面对不同情况，选择不同技术，最后才能真正的以最优的方案解决问题。</p>
]]></content>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker-compose快速创建个人博客</title>
    <url>/blog/2019/05/31/%E4%BD%BF%E7%94%A8docker-compose%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="一、安装docker">一、安装docker</h2>
<p>可以查看下方博客进行安装</p>
<p><a href="https://blog.csdn.net/weixin_44209403/article/details/103232900" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44209403/article/details/103232900</a></p>
<h2 id="二、安装docker-compose">二、安装docker-compose</h2>
<h3 id="1-从github上下载docker-compose二进制文件安装">1.从github上下载docker-compose二进制文件安装</h3>
<p><strong>下载最新版的docker-compose文件</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.16.1/</span>docker-compose-uname -s-uname -m -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>
<p><strong>若是github访问太慢，可以用daocloud下载</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//g</span>et.daocloud.io<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.25.1/</span>docker-compose-uname -s-uname -m -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>
<p><strong>添加可执行权限</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>
<p><strong>测试安装结果</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<h2 id="三、导入编写好的yml文件，进行环境和项目搭建">三、导入编写好的yml文件，进行环境和项目搭建</h2>
<p>导入如下yml文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span>: '3.3'</span><br><span class="line"></span><br><span class="line"><span class="attribute">services:</span></span><br><span class="line">   db:</span><br><span class="line">     image: mysql:5.7</span><br><span class="line">     volumes:</span><br><span class="line">       - db_data:/var/lib/mysql</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class="line">       MYSQL_DATABASE: wordpress</span><br><span class="line">       MYSQL_USER: wordpress</span><br><span class="line">       MYSQL_PASSWORD: wordpress</span><br><span class="line"></span><br><span class="line">   wordpress:</span><br><span class="line">     depends_on:</span><br><span class="line">       - db</span><br><span class="line">     image: wordpress:latest</span><br><span class="line">     ports:</span><br><span class="line">       - "8000:80"</span><br><span class="line">     restart: always</span><br><span class="line">     environment:</span><br><span class="line">       WORDPRESS_DB_HOST: db:3306</span><br><span class="line">       WORDPRESS_DB_USER: wordpress</span><br><span class="line">       WORDPRESS_DB_PASSWORD: wordpress</span><br><span class="line">       WORDPRESS_DB_NAME: wordpress</span><br><span class="line"><span class="attribute">volumes:</span></span><br><span class="line">    db_data: &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>在服务器中创建文件夹，将上方yml文件导入到服务器文件夹中</p>
<p>在该文件夹下输入如下命令，即可快速搭建好博客环境</p>
<p>注意：命令中“docker-compose”是你的yml文件的名称</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure>
<p>最后，输入docker ps，可以查看已经有两个服务启动了</p>
<p><img src="https://img-blog.csdnimg.cn/20200423195658218.png" alt="https://img-blog.csdnimg.cn/20200423195658218.png"></p>
<p>然后在浏览器中输入你的服务器ip和端口8000就可以访问你的博客了</p>
<p>注意：第一次访问需要设置你的用户名和密码，还有邮箱。</p>
<p><img src="https://img-blog.csdnimg.cn/20200423195646717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt></p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux(CentOS7)安装docker和使用docker教程</title>
    <url>/blog/2019/05/31/linux(%E9%98%BF%E9%87%8CESC%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9ACentOS%207.6%2064%E4%BD%8D)docker%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85docker%E5%92%8C%E4%BD%BF%E7%94%A8docker%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、什么是Docker">一、什么是Docker</h2>
<p><img src="https://img-blog.csdnimg.cn/20191125094548758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
1、Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。<br>
2、Docker使用Go语言编写<br>
适用于Linux平台（仅适用） ，但是又能在windows和OS X mac等系统上安装，为什么呢？ 其实docker并没有跨平台，它运行依赖Linux内核，在OS X和windows运行docker会先产生一个Linux虚拟机来运行。<br>
Docker 官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>
Github Docker 源码：<a href="https://github.com/docker/docker" target="_blank" rel="noopener">https://github.com/docker/docker</a><br>
帮助文档:<a href="https://docs.docker.com" target="_blank" rel="noopener">https://docs.docker.com</a></p>
<h2 id="二、为什么要使用-Docker，Docker有什么作用？">二、为什么要使用 Docker，Docker有什么作用？</h2>
<p>1、首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数很多个 Docker 容器。<br>
容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销小。<br>
2、DocKer一次构建可放在任何地方就可以运行，不需要进行任何改变DocKer 就类似于一个容器。这个容器就好像咱们常用的虚拟机一样，当我们虚拟机里面安装过VS、SQL、浏览器 …  之后咱们就把虚拟机镜像备份下来、等到下一次需要重新搭一个环境的时候，就可以省去很多事情了，直接把备份的虚拟机运行起来，该有的就都有了，省去了很多事情。</p>
<p>在用DocKer的情况下，咱们可以直接把项目发布在DocKer容器上面进行测试，当项目需要正式上线的时候我们直接可以把做好的DocKer 镜像部署上去就行了，如果测试的好，就不必担心项目上正式版本的时候再出现什么问题了，（比如说 咱们的Confing 配置信息很多项目都是什么测试环境地址，正式环境地址的，但是用过DocKer之后就一个就行了）DocKer可以在 云、Windows、Linux 等环境上进行部署，就单说这一点就省去了我的很多费用、还有项目部署上线的风险,不必每次项目上线都留守一堆人才等着项目报错.</p>
<h2 id="三、安装Docker和使用Docker">三、安装Docker和使用Docker</h2>
<p>Cenos7阿里云下载地址：<a href="http://mirrors.aliyun.com/centos" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos</a><br>
Docker官网安装说明：<a href="https://docs.docker.com/install/linux/docker-ce/centos" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos</a><br>
1、如果以前安装过旧版本的docker可以删除：</p>
<blockquote>
<p>yum remove docker</p>
</blockquote>
<p>2、可以先升级所有包同时也升级软件和系统内核</p>
<blockquote>
<p>yum -y update</p>
</blockquote>
<p>3、安装docker</p>
<blockquote>
<p>​yum install docker</p>
</blockquote>
<p>4、查看docker版本，是否安装成功</p>
<blockquote>
<p>docker version</p>
</blockquote>
<p>5、启动docker，设置开机启动</p>
<blockquote>
<p>启动：service docker start<br>
开机启动：<br>
systemctl start docker<br>
systemctl enable docker<br>
查看状态：service docker status<br>
停止docker：service docker stop</p>
</blockquote>
<p>6、 切换镜像仓库地址，由于docker默认的镜像下载地址是国外的地址，下载速度慢，所有我们需要更换，提高下载速度，这里我们使用阿里云的镜像地址</p>
<blockquote>
<p>使用命令：vi /etc/docker/daemon.json 找到配置文件修改为下方内容<br>
{<br>
“registry-mirrors”: [“<a href="https://pee6w651.mirror.aliyuncs.com" target="_blank" rel="noopener">https://pee6w651.mirror.aliyuncs.com</a>”]<br>
}<br>
#使生效<br>
sudo systemctl daemon-reload<br>
#重启docker服务<br>
sudo systemctl restart docker</p>
</blockquote>
<p>7、查找可用docker镜像，和拉取镜像。<br>
注：docker镜像是以：用户名/镜像名来显示的，如果要拉取需要这样的格式，不过部分镜像可以直接通过镜像名拉取</p>
<blockquote>
<p>搜索： docker search 要搜索的镜像名称<br>
拉取：docker pull 镜像名<br>
示例：<br>
docker search mysql<br>
docker pull mysql</p>
</blockquote>
<p>8、查看拉取的所有镜像</p>
<blockquote>
<p>docker images</p>
</blockquote>
<p>9、创建容器</p>
<blockquote>
<p>docker run -di --name 自定义的容器名称 -p 本地主机端口：映射到容器的端口  镜像名称<br>
示例：docker run -di --name myredis  6379:6379  redis</p>
</blockquote>
<p>10、如果使用阿里云ESC服务器需要配置安全组策略，开放端口<br>
<img src="https://img-blog.csdnimg.cn/20191125113619428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
11、查看所有容器和查看当前运行的容器，启动容器，停止容器，删除容器</p>
<blockquote>
<p>查看所有容器：docker ps -a<br>
当前运行容器：docker ps<br>
启动容器：docker start 容器ID(使用docker ps -a可以查看要启动容器的id)<br>
停止容器：docker stop 容器ID<br>
删除容器：docker rm 容器ID(删除容器要先停止当前要删除的容器)</p>
</blockquote>
<p>12、进入容器</p>
<blockquote>
<p>docker exec -it 容器ID /bin/bash</p>
</blockquote>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Vue+Redis实现单点登录(一处登录，另一处退出登录)</title>
    <url>/blog/2019/05/31/SpringBoot+Vue+Jpa+Redis%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95(%E4%B8%80%E5%A4%84%E7%99%BB%E5%BD%95%EF%BC%8C%E5%8F%A6%E4%B8%80%E5%A4%84%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95)/</url>
    <content><![CDATA[<h2 id="一、需求">一、需求</h2>
<p>实现用户在浏览器登录后，跳转到其他页面，当用户在其它地方又登录时，前面用户登录的页面退出登录(列如qq挤号那种方式)</p>
<h2 id="二、实现思路">二、实现思路</h2>
<p>用户在前端填写用户信息登录后，后台接收数据先去数据库进行判断，如果登录成功，创建map集合，以用户id为键，token为值，先通过当前登录用户的id去获取token，如果token存在说明该用户已经登录过，调用redis以token为键删除上个用户的信息，调用方法生成新token，并将token存入map集合，将用户信息存入redis，并将token存入cookie。当用户回到前面登录的页面时，刷新页面，调用方法，通过后端获取cookie的token值，通过token在redis中查询用户信息是否存在，如果不存在，前端通过返回值判断重新回到登录页面！</p>
<h2 id="三、实现代码">三、实现代码</h2>
<p>后端：<br>
1、创建SpringBoot项目，创建User表，由于是通过Vue编写的，所以是前后端分离，需要跨域，我这里编写了跨域配置类，还有redis的util类，返回的封装类，cookie的util类，文末有源码提供，可以自行提取。<br>
2、yum配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    database: 0    #redis的默认数据库为0</span><br><span class="line">    host: 127.0.0.1  #链接redis的ip</span><br><span class="line">    port: 6379  #链接redis的端口号</span><br><span class="line">    password:   #链接redis的密码 默认为空</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-total: 200    #链接redis的总数目</span><br><span class="line">        max-active: 100  #链接redis的最大</span><br><span class="line">        max-idle: 8      #最大的链接数量</span><br><span class="line">        min-idle: 5     #最小的链接数量</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/test?useUnicode=true</span></span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  jpa:</span><br><span class="line">    show-sql: <span class="keyword">true</span></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">REDIS_KEY : USER_TOKEN</span><br></pre></td></tr></table></figure>
<p>3、编写实体User.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>,unique = <span class="keyword">true</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span>  String username;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>,nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String  password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、编写Dao，UserDao.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、编写serviceImpl,UserServiceImpl.class进行登录的业务逻辑处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisDao jedisDao;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_KEY&#125;"</span>)   <span class="comment">//从配置文件中取值</span></span><br><span class="line">    <span class="keyword">private</span> String KEY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; UserLogin = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> u</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">userlogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response, User u)</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询登录是否成功</span></span><br><span class="line">        User user=userDao.findByUsernameAndPassword(u.getUsername(),u.getPassword());</span><br><span class="line">        <span class="comment">//判断us是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        String token=<span class="string">"user_"</span>+ UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//从map中获得redis中的key</span></span><br><span class="line">        String oldToken = UserLogin.get(user.getId());</span><br><span class="line">        <span class="comment">//判断map中是否存在该id</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(oldToken))&#123;</span><br><span class="line">            <span class="comment">//删除redis中老的值</span></span><br><span class="line">            jedisDao.delValue(oldToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新的的key保存到map中</span></span><br><span class="line">        UserLogin.put(user.getId(),token);</span><br><span class="line">        <span class="comment">//将信息存入redis</span></span><br><span class="line">        jedisDao.setValue(token, JsonUtils.objectToJson(user));</span><br><span class="line">        <span class="comment">//将token放入cookie中</span></span><br><span class="line">        CookieUtils.setCookie(request,response,KEY,token,<span class="number">5</span>*<span class="number">60</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserByToken</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从cookie中取出用户token</span></span><br><span class="line">        String token=CookieUtils.getCookieValue(request,KEY);</span><br><span class="line">        <span class="comment">//从redis中取出用户信息</span></span><br><span class="line">        String user= jedisDao.getValue(token);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、编写controller，接收前端请求，返回数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">Login</span><span class="params">(HttpServletResponse response , HttpServletRequest request, @RequestBody User user, Model model)</span></span>&#123;</span><br><span class="line">        ResponseResult responseResult=<span class="keyword">new</span> ResponseResult();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user2 = userService.userlogin(request, response, user);</span><br><span class="line">            <span class="keyword">if</span> (user2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                responseResult.setState(<span class="number">200</span>);</span><br><span class="line">                responseResult.setMsg(<span class="string">"登录成功！"</span>);</span><br><span class="line">                <span class="keyword">return</span> responseResult;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                responseResult.setState(<span class="number">202</span>);</span><br><span class="line">                responseResult.setMsg(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">                <span class="keyword">return</span> responseResult;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            responseResult.setState(<span class="number">500</span>);</span><br><span class="line">            responseResult.setMsg(<span class="string">"发生错误，登录失败！"</span>);</span><br><span class="line">            <span class="keyword">return</span> responseResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">getUserInfo</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseResult responseResult=<span class="keyword">new</span> ResponseResult();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String token = userService.getUserByToken(response, request);</span><br><span class="line">            <span class="keyword">if</span>(token!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                responseResult.setState(<span class="number">200</span>);</span><br><span class="line">                responseResult.setMsg(<span class="string">"登录中！"</span>);</span><br><span class="line">                <span class="keyword">return</span> responseResult;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                responseResult.setState(<span class="number">202</span>);</span><br><span class="line">                responseResult.setMsg(<span class="string">"在别处登录！"</span>);</span><br><span class="line">                <span class="keyword">return</span> responseResult;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            responseResult.setMsg(<span class="string">"发生错误！"</span>);</span><br><span class="line">            <span class="keyword">return</span> responseResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Vue前端<br>
1、创建Vue项目：<strong>vue init webpack 项目名称</strong><br>
2、引入axios：<strong>npm install --save axios vue-axios</strong><br>
3、引入element：<strong>npm i element-ui -S</strong><br>
4、在src的main.js下配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="comment">// element-ui 引入文件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="comment">//注册 VueAxios, axios</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"><span class="comment">//配置axios支持cookie</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>5、在src的components下创建login.vue,userinfo.vue,并在src的router下配置访问地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'@/components/login'</span></span><br><span class="line"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">'@/components/userinfo'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: login</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/user_info'</span>,</span><br><span class="line">    component: UserInfo</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>6、前端的代码这里就不贴出了，代码是有详细的注释，请自行下载代码查看</p>
<h2 id="四、代码地址和演示效果">四、代码地址和演示效果</h2>
<p>登录：<br>
<img src="https://img-blog.csdnimg.cn/20191125225533194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2019112522555731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
下线：<br>
<img src="https://img-blog.csdnimg.cn/20191125225616692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
dome代码地址</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1qm5uktPJAT6pB4SI37s5Vw" target="_blank" rel="noopener">https://pan.baidu.com/s/1qm5uktPJAT6pB4SI37s5Vw</a><br>
提取码：e5hn</p>
</blockquote>
<p>该dome仅供参考，如果有什么错误希望可以及时留言指出，谢谢！</p>
]]></content>
      <tags>
        <tag>单点登录</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+elasticsearch实现全文检索，做一个简单的搜索引擎</title>
    <url>/blog/2019/05/31/SpringBoot+elasticsearch%E5%AE%9E%E7%8E%B0%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%EF%BC%8C%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h2 id="一、什么是elasticsearch">一、什么是elasticsearch</h2>
<p>答：“ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。”</p>
<h2 id="二、配置Elasticsearch和logstash">二、配置Elasticsearch和logstash</h2>
<p><a href="https://blog.csdn.net/fjyab/article/details/81101284" target="_blank" rel="noopener">https://blog.csdn.net/fjyab/article/details/81101284</a><br>
<a href="https://blog.csdn.net/wzn1054162229/article/details/101480921" target="_blank" rel="noopener">https://blog.csdn.net/wzn1054162229/article/details/101480921</a><br>
注：上方博客可能配置方式不同，请自行参照。其中配置logstash将数据库数据导入到Elasticsearch中时，如果运行不能连接，那么数据库连接JAR包请放到下方路径下:<img src="https://img-blog.csdnimg.cn/20191115184933325.png" alt="在这里插入图片描述"></p>
<h2 id="三、后台代码编写">三、后台代码编写</h2>
<p>1、创建SpringBoot项目，通过spring boot操作elasticsearch需要通过spring data elasticsearch来实现</p>
<p>2、导入依赖，和yml配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- elasticsearch --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8888</span></span><br><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    elasticsearch:</span><br><span class="line">      cluster-name: es</span><br><span class="line">      cluster-nodes: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9300</span></span><br><span class="line">  jackson:</span><br><span class="line">    <span class="keyword">default</span>-property-inclusion: non_null</span><br></pre></td></tr></table></figure>
<p>3、编写实体类：Goods .java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"goodscat"</span>, type = <span class="string">"docs"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)<span class="comment">//选中elasticsearch索引</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String isParent;</span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line">    <span class="keyword">private</span> Long level;</span><br><span class="line">    <span class="keyword">private</span> String pathid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、编写repository层，创建GoodsRepository.java,继承<a href="https://blog.csdn.net/tianyaleixiaowu/article/details/76149547/" target="_blank" rel="noopener">ElasticsearchRepository</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Goods</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、编写service和serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="function">PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository goodsRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page = request.getPage() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> size = request.getSize();</span><br><span class="line">        <span class="comment">//创建查询构建器</span></span><br><span class="line">        NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        <span class="comment">//结果过滤</span></span><br><span class="line">        queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"cid"</span>, <span class="string">"name"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        queryBuilder.withPageable(PageRequest.of(page, size));</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"name"</span>, request.getKey()));</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        AggregatedPage&lt;Goods&gt; result = template.queryForPage(queryBuilder.build(), Goods<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        <span class="comment">//分页结果解析</span></span><br><span class="line">        <span class="keyword">long</span> total = result.getTotalElements();</span><br><span class="line">        Integer totalPages1 = result.getTotalPages();    <span class="comment">//失效</span></span><br><span class="line">        Long totalPages = total % size == <span class="number">0</span> ? total / size : total / size + <span class="number">1</span>;</span><br><span class="line">        List&lt;Goods&gt; goodsList = result.getContent();</span><br><span class="line">        <span class="comment">//解析聚合结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult(total, totalPages, goodsList);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、编写分页工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"search"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Goods&gt;&gt; search(SearchRequest request) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(searchService.search(request));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、编写一个搜索条件接收类，用来接收前台搜索条件，和分页条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;<span class="comment">// 搜索条件</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;<span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_SIZE = <span class="number">10</span>;<span class="comment">// 每页大小，不从页面接收，而是固定大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PAGE = <span class="number">1</span>;<span class="comment">// 默认页</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_PAGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取页码时做一些校验，不能小于1</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_PAGE, page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、返回的json数据格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"totalPage"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"cid"</span>: <span class="number">50010363</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"许愿瓶/幸运星瓶"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"cid"</span>: <span class="number">70000558</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"英国特许公认会计师ACCA"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"cid"</span>: <span class="number">50004583</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"英国特许公认会计师ACCA"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、Vue-Element前端编写">四、Vue+Element前端编写</h2>
<p>1、创建vue项目<br>
2、安装 axios 插件，在当前项目下的终端输入命令: ==npm install --save axios vue-axios==<br>
安装 <a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element</a> 插件，在当前项目下的终端输入命令:==npm i element-ui -S==<br>
3、在 src 文件夹下的程序入口 main.js 中导入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="comment">// element-ui 引入文件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="comment">//注册 VueAxios, axios</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>
<p>4、导入template，编写静态页面，并绑定下方方法和属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 上方搜索框，和下拉即时搜索 --&gt;</span><br><span class="line">    &lt;el-autocomplete</span><br><span class="line">      v-model=<span class="string">"state"</span></span><br><span class="line">      :fetch-suggestions=<span class="string">"querySearchAsync"</span></span><br><span class="line">      placeholder=<span class="string">"请输入内容"</span></span><br><span class="line">      @select=<span class="string">"handleSelect"</span></span><br><span class="line">      select-when-unmatched=<span class="string">"true"</span></span><br><span class="line">      :debounce=<span class="string">"0"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-autocomplete</span>&gt;</span></span></span><br><span class="line">    &lt;el-button slot=<span class="string">"append"</span> icon=<span class="string">"el-icon-search"</span> @click=<span class="string">"onSubmit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 下方搜索结果显示 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"div2"</span> v-show=<span class="string">"con"</span>&gt;</span><br><span class="line">      &lt;p style=<span class="string">"font-size:22px"</span>&gt;</span><br><span class="line">        搜索</span><br><span class="line">        &lt;span style=<span class="string">"color:	#F08080"</span>&gt;&#123;&#123;state&#125;&#125;&lt;<span class="regexp">/span&gt;的结果（总共搜索到</span></span><br><span class="line"><span class="regexp">        &lt;span style="color:	#F08080"&gt;&#123;&#123;total&#125;&#125;&lt;/</span>span&gt;条记录）</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p v-for="entity in All" class="p2"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a href="http:/</span><span class="regexp">/www.baidu.com"&gt;&#123;&#123;entity.name&#125;&#125;&lt;/</span>a&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- 分页组件 --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-pagination</span></span><br><span class="line"><span class="regexp">        background</span></span><br><span class="line"><span class="regexp">        layout="prev, pager, next"</span></span><br><span class="line"><span class="regexp">        :total="total"</span></span><br><span class="line"><span class="regexp">        :page-size="15"</span></span><br><span class="line"><span class="regexp">        @current-change="handleCurrentChange"</span></span><br><span class="line"><span class="regexp">        :current-page="page"</span></span><br><span class="line"><span class="regexp">      &gt;&lt;/</span>el-pagination&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：其中显示搜索内容的p标签，因为绑定了v-for和element产生了冲突，会报错，但是不影响效果，请忽略</p>
<p>5、编写各部分js代码，定义属性，方法，请求。各方法属性有注释，请认真查看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//导入axios，进行ajax访问</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      con: <span class="literal">false</span>,<span class="comment">//控制下方显示框，隐藏或显示</span></span><br><span class="line">      restaurants: [],<span class="comment">//即时搜索，下拉框信息</span></span><br><span class="line">      state: <span class="string">''</span>,<span class="comment">//搜索条件</span></span><br><span class="line">      timeout: <span class="literal">null</span>,</span><br><span class="line">      All: [],<span class="comment">//下方显示框数据集合</span></span><br><span class="line">      total: <span class="number">0</span>,  <span class="comment">//搜索返回的总结果数量</span></span><br><span class="line">      page: <span class="number">1</span>,<span class="comment">//分页的当前页数</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    state: &#123; <span class="comment">// 监视字段，页数</span></span><br><span class="line">      handler () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state.length &gt; <span class="number">0</span>) &#123;<span class="comment">//如果有搜索条件</span></span><br><span class="line">          <span class="keyword">this</span>.restaurants = [];<span class="comment">//先清空即时搜索集合数据</span></span><br><span class="line">          <span class="keyword">this</span>.loadAll();<span class="comment">//查询</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.con = <span class="literal">false</span>;<span class="comment">//没有搜索条件，隐藏下方数据显示窗口</span></span><br><span class="line">          <span class="keyword">this</span>.restaurants = [];</span><br><span class="line">          <span class="keyword">this</span>.All = [];<span class="comment">//并清空结果集合</span></span><br><span class="line">          <span class="keyword">this</span>.page = <span class="number">1</span>;<span class="comment">//分页归一</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    page: &#123; <span class="comment">// 监视字段，页数</span></span><br><span class="line">      handler () &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadAll();<span class="comment">//如果页面发生变化，就查询新的页面的数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//分页是上下页，触发的方法</span></span><br><span class="line">    handleCurrentChange (val) &#123;<span class="comment">//当前页</span></span><br><span class="line">      <span class="keyword">this</span>.page = val;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    loadAll () &#123;</span><br><span class="line">      <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">      axios.get(<span class="string">"http://localhost:8888/search"</span>, &#123;</span><br><span class="line">        params: &#123;</span><br><span class="line">          <span class="string">'key'</span>: app.state,<span class="comment">//搜索条件</span></span><br><span class="line">          <span class="string">'page'</span>: app.page<span class="comment">//当前第几页</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">        app.total = resp.data.total;<span class="comment">//当前数据一共有多少条</span></span><br><span class="line">        <span class="keyword">var</span> rs = resp.data.items;</span><br><span class="line">        app.All = rs;<span class="comment">//给显示结果的集合赋值</span></span><br><span class="line">        <span class="keyword">if</span> (rs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//只显示10条提示</span></span><br><span class="line">            app.restaurants[i] = &#123; <span class="attr">value</span>: rs[i].name, <span class="attr">cid</span>: rs[i].cid &#125;<span class="comment">//给及时搜索下拉框赋值</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    querySearchAsync (queryString, cb) &#123;<span class="comment">//加载即时搜索条件</span></span><br><span class="line">      <span class="keyword">var</span> results = <span class="keyword">this</span>.restaurants;</span><br><span class="line">      clearTimeout(<span class="keyword">this</span>.timeout);</span><br><span class="line">      <span class="keyword">this</span>.timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(results);</span><br><span class="line">      &#125;, <span class="number">1000</span> * <span class="built_in">Math</span>.random());</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSelect (item) &#123;<span class="comment">//选中下拉提示的数据时触发</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.All != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.con = <span class="literal">true</span>;<span class="comment">//显示结果</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onSubmit () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.All != <span class="string">""</span>) &#123;<span class="comment">//点击查询图标时，显示结果</span></span><br><span class="line">        <span class="keyword">this</span>.con = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、编写style样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.el-autocomplete &#123;</span><br><span class="line">  width: <span class="number">400</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.p2 &#123;</span><br><span class="line">  margin-left: <span class="number">160</span>px;</span><br><span class="line">  text-align: left;</span><br><span class="line">  font-size: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #4f5a75;</span><br><span class="line">&#125;</span><br><span class="line">.div2 &#123;</span><br><span class="line">  <span class="comment">/* background: blue; */</span></span><br><span class="line">  margin-top: <span class="number">25</span>px;</span><br><span class="line">  padding-top: <span class="number">25</span>px;</span><br><span class="line">  margin-left: <span class="number">270</span>px;</span><br><span class="line">  width: <span class="number">750</span>px;</span><br><span class="line">  height: <span class="number">600</span>px;</span><br><span class="line">  border: 1px solid #b0c4de;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>
<p>五、演示效果<br>
1、即时搜索<br>
<img src="https://img-blog.csdnimg.cn/20191115201102338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
2、搜索结果分页显示<br>
<img src="https://img-blog.csdnimg.cn/20191115201237861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>六、项目dome源码和sql文件</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/190d0nQhFQ-ZIS1dcAqdNig" target="_blank" rel="noopener">https://pan.baidu.com/s/190d0nQhFQ-ZIS1dcAqdNig</a><br>
提取码：tbp5</p>
</blockquote>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目实现高并发商品秒杀</title>
    <url>/blog/2019/05/31/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E5%95%86%E5%93%81%E7%A7%92%E6%9D%80/</url>
    <content><![CDATA[<h1>SpringBoot项目实现高并发商品秒杀</h1>
<p>注：该项目使用IDEA+SpringBoot+Maven+Mybatis+Redis+RabbitMQ 等技术实现。本人水平有限，以下代码可能有错误，或者解释不清，希望理解，并且及时下方留言，及时修改，谢谢各位道友！</p>
<h2 id="一、秒杀实现思路">一、秒杀实现思路</h2>
<p>秒杀其实就是一件商品，在某一个时间段内，由于降低了价格，超高的优惠，导致在这一个时间段内购买量大量增加，但是库存有限，产生的一种高并发现象。<br>
秒杀最重要的就是减库存，增订单。同时需要判断用户是否多次秒杀，同时还要防止用户通过恶意软件刷单。</p>
<p>所以需要以下<strong>3</strong>点：<br>
1、高可用：保证系统的高可用和正确性，设计PlanB备用。<br>
2、一致性：保证秒杀减库存中的数据一致性。<br>
3、高性能：涉及大量并发读写，所以需要支持高并发，从动静分离、热点发现与隔离、请求削峰与分层过滤、服务端极致优化来实现。</p>
<p><strong>具体流程</strong>：系统初始化，把商品库存数量等加载到Redis中，用户登录时将用户信息保存到Seesion中，保证用户信息的完整，精确，当用户发送秒杀请求时，判断用户是否已秒杀过，同时前端给用户验证码等判断，将各用户请求时间分开，当确定用户验证通过时，判断库存是否足够，如果不够直接返回请求失败，避免系统压力，如果足够就减库存，Redis预减库存，同时将秒杀请求发送给RabbitMQ ，同时给前端返回状态，显示排队中等状态，同时前端给一个定时根据该商品id去循环请求，后端RabbitMQ监听到消息，就开始操作数据库，修改数据库商品库存和新增订单等操作，前端循环请求返回状态，得到订单代表秒杀成功，或者队列中，否则秒杀失败，秒杀成功后，用户需要在一定时间内付款，不然就自动取消订单，返回库存。</p>
<h2 id="二、部分代码实现">二、部分代码实现</h2>
<p>Redis安装教程：<a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-install.html</a><br>
RabbitMQ安装教程：<a href="https://www.linuxprobe.com/install-rabbitmq-on-centos-7.html" target="_blank" rel="noopener">https://www.linuxprobe.com/install-rabbitmq-on-centos-7.html</a></p>
<p>1、pom文件和xml配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.ljs&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;miaosha_idea&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;miaosha_idea&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http:<span class="comment">//maven.apache.org&lt;/url&gt;</span></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line"> &lt;project.build.sourceEncoding&gt;UTF8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.38&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.6&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;  --&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;!-- 打war包插件 --&gt;</span><br><span class="line">      &lt;!-- &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt; --&gt;</span><br><span class="line">      &lt;!-- 打jar包插件 --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginManagement&gt;&lt;!-- <span class="function">lock down plugins versions to avoid using Maven <span class="title">defaults</span> <span class="params">(may be moved to parent pom)</span> --&gt;</span></span><br><span class="line"><span class="function">      &lt;plugins&gt;</span></span><br><span class="line"><span class="function">        &lt;!-- clean lifecycle, see https:<span class="comment">//maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.1.0&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;!-- <span class="keyword">default</span> lifecycle, jar packaging: see https:<span class="comment">//maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.0.2&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.8.0&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;2.22.1&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.0.2&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;2.5.2&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;2.8.2&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;!-- site lifecycle, see https:<span class="comment">//maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.7.1&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">        &lt;plugin&gt;</span></span><br><span class="line"><span class="function">          &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">          &lt;version&gt;3.0.0&lt;/version&gt;</span></span><br><span class="line"><span class="function">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="function">      &lt;/plugins&gt;</span></span><br><span class="line"><span class="function">    &lt;/pluginManagement&gt;</span></span><br><span class="line"><span class="function">  &lt;/build&gt;</span></span><br><span class="line"><span class="function">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure>
<p>yml配置：主要配置了thymeleaf，redis，RabbitMQ，数据库的一些配置，注意redis，RabbitMQ和数据库的端口，ip和用户名，密码，避免错误。</p>
<blockquote>
<p>#thymeleaf<br>
spring.thymeleaf.cache=false<br>
spring.thymeleaf.content-type=text/html<br>
spring.thymeleaf.enabled=true<br>
spring.thymeleaf.encoding=UTF-8<br>
spring.thymeleaf.mode=HTML5<br>
#拼接前缀与后缀,去创建templates目录，里面放置模板文件<br>
spring.thymeleaf.prefix=classpath:/templates/<br>
spring.thymeleaf.suffix=.html<br>
#mybatis<br>
#是否打印sql语句<br>
#spring.jpa.show-sql= true<br>
mybatis.type-aliases-package=com.ljs.miaosha.domain<br>
#mybatis.type-handlers-package=com.example.typehandler<br>
#下划线转换为驼峰<br>
mybatis.configuration.map-underscore-to-camel-case=true<br>
mybatis.configuration.default-fetch-size=100<br>
#ms --3000ms—&gt;3s<br>
mybatis.configuration.default-statement-timeout=3000<br>
#mybatis配置文件路径<br>
#mapperLocaitons<br>
mybatis.mapper-locaitons=classpath:com/ljs/miaosha/dao/*.xml<br>
#druid<br>
spring.datasource.url=jdbc:mysql://localhost/miaosha?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false<br>
spring.datasource.username=root<br>
spring.datasource.password=root<br>
spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br>
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource<br>
spring.datasource.filters=stat<br>
spring.datasource.initialSize=100<br>
spring.datasource.minIdle=500<br>
spring.datasource.maxActive=1000<br>
spring.datasource.maxWait=60000<br>
spring.datasource.timeBetweenEvictionRunsMillis=60000<br>
spring.datasource.minEvictableIdleTimeMillis=30000<br>
spring.datasource.validationQuery=select ‘x’<br>
spring.datasource.testWhileIdle=true<br>
spring.datasource.testOnBorrow=false<br>
spring.datasource.testOnReturn=false<br>
spring.datasource.poolPreparedStatements=true<br>
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20<br>
#redis  配置服务器等信息<br>
redis.host=127.0.0.1<br>
redis.port=6379<br>
redis.timeout=10<br>
#redis.password=123456<br>
redis.poolMaxTotal=1000<br>
redis.poolMaxldle=500<br>
redis.poolMaxWait=500<br>
#static  静态资源配置，设置静态文件路径css,js,图片等等<br>
#spring.mvc.static-path-pattern=/static/**    spring.mvc.static-path-pattern=/**<br>
spring.resources.add-mappings=true<br>
spring.resources.cache-period=3600<br>
spring.resources.chain.cache=true<br>
spring.resources.chain.enabled=true<br>
spring.resources.chain.gzipped=true<br>
spring.resources.chain.html-application-cache=true<br>
spring.resources.static-locations=classpath:/static/<br>
#RabbitMQ配置<br>
spring.rabbitmq.host=106.14.252.156<br>
spring.rabbitmq.port=5672<br>
spring.rabbitmq.username=admin<br>
spring.rabbitmq.password=StrongPassword<br>
spring.rabbitmq.virtual-host=/<br>
#消费者数量<br>
spring.rabbitmq.listener.simple.concurrency=10<br>
#消费者最大数量<br>
spring.rabbitmq.listener.simple.max-concurrency=10<br>
#消费，每次从队列中取多少个,取多了，可能处理不过来<br>
spring.rabbitmq.listener.simple.prefetch=1<br>
spring.rabbitmq.listener.auto-startup=true<br>
#消费失败的数据重新压入队列<br>
spring.rabbitmq.listener.simple.default-requeue-rejected=true<br>
#发送,队列满的时候，发送不进去，启动重置<br>
spring.rabbitmq.template.retry.enabled=true<br>
#一秒钟之后重试<br>
spring.rabbitmq.template.retry.initial-interval=1000<br>
spring.rabbitmq.template.retry.max-attempts=3<br>
#最大间隔 10s<br>
spring.rabbitmq.template.retry.max-interval=10000<br>
spring.rabbitmq.template.retry.multiplier=1.0</p>
</blockquote>
<p>2、各部分接口<br>
2_1登录接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/do_login"</span>)<span class="comment">//作为异步操作</span></span><br><span class="line">		<span class="meta">@ResponseBody</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">doLogin</span><span class="params">(HttpServletResponse response,@Valid LoginVo loginVo)</span> </span>&#123;<span class="comment">//0代表成功</span></span><br><span class="line">			<span class="comment">//参数检验成功之后，登录</span></span><br><span class="line">			CodeMsg cm=miaoshaUserService.login(response,loginVo);</span><br><span class="line">			<span class="keyword">if</span>(cm.getCode()==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> Result.success(<span class="keyword">true</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> Result.error(cm);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>2_2、页面缓存接口，返回秒杀商品集合信息， 做页面缓存的list页面，防止同一时间访问量巨大到达数据库，如果缓存时间过长，数据及时性就不高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/to_list"</span>,produces=<span class="string">"text/html"</span>)</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toListCache</span><span class="params">(Model model,MiaoshaUser user,HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.取缓存</span></span><br><span class="line">		<span class="comment">// public &lt;T&gt; T get(KeyPrefix prefix,String key,Class&lt;T&gt; data)</span></span><br><span class="line">		String html = redisService.get(GoodsKey.getGoodsList, <span class="string">""</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (!StringUtils.isEmpty(html)) &#123;</span><br><span class="line">			<span class="keyword">return</span> html;</span><br><span class="line">		&#125;</span><br><span class="line">		model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">		<span class="comment">//查询商品列表</span></span><br><span class="line">		List&lt;GoodsVo&gt; goodsList= goodsService.getGoodsVoList();</span><br><span class="line">		model.addAttribute(<span class="string">"goodsList"</span>, goodsList);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.手动渲染  使用模板引擎	templateName:模板名称 	String templateName="goods_list";</span></span><br><span class="line">		SpringWebContext context=<span class="keyword">new</span> SpringWebContext(request,response,request.getServletContext(),</span><br><span class="line">				request.getLocale(),model.asMap(),applicationContext);</span><br><span class="line">		html=thymeleafViewResolver.getTemplateEngine().process(<span class="string">"goods_list"</span>, context);</span><br><span class="line">		<span class="comment">//保存至缓存</span></span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.isEmpty(html)) &#123;</span><br><span class="line">			redisService.set(GoodsKey.getGoodsList, <span class="string">""</span>, html);<span class="comment">//key---GoodsKey:gl---缓存goodslist这个页面</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> html;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>2_3、秒杀商品详情页加载接口，当访问商品详情页时，触发该接口，获取商品详情页信息，并且得到秒杀商品当前时间状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/detail/&#123;goodsId&#125;"</span>)</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;GoodsDetailVo&gt; <span class="title">toDetail_staticPage</span><span class="params">(Model model, MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">													 HttpServletRequest request, HttpServletResponse response, @PathVariable(<span class="string">"goodsId"</span>)</span><span class="keyword">long</span> goodsId) </span>&#123;<span class="comment">//id一般用snowflake算法</span></span><br><span class="line">		System.out.println(<span class="string">"页面静态化/detail/&#123;goodsId&#125;"</span>);</span><br><span class="line">		model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">		GoodsVo goodsVo=goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">		model.addAttribute(<span class="string">"goods"</span>, goodsVo);</span><br><span class="line">		<span class="comment">//既然是秒杀，还要传入秒杀开始时间，结束时间等信息</span></span><br><span class="line">		<span class="keyword">long</span> start=goodsVo.getStartDate().getTime();</span><br><span class="line">		<span class="keyword">long</span> end=goodsVo.getEndDate().getTime();</span><br><span class="line">		<span class="keyword">long</span> now=System.currentTimeMillis();</span><br><span class="line">		<span class="comment">//秒杀状态量</span></span><br><span class="line">		<span class="keyword">int</span> status=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//开始时间倒计时</span></span><br><span class="line">		<span class="keyword">int</span> remailSeconds=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//查看当前秒杀状态</span></span><br><span class="line">		<span class="keyword">if</span>(now&lt;start) &#123;<span class="comment">//秒杀还未开始，---&gt;倒计时</span></span><br><span class="line">			status=<span class="number">0</span>;</span><br><span class="line">			remailSeconds=(<span class="keyword">int</span>) ((start-now)/<span class="number">1000</span>);  <span class="comment">//毫秒转为秒</span></span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(now&gt;end)&#123; <span class="comment">//秒杀已经结束</span></span><br><span class="line">			status=<span class="number">2</span>;</span><br><span class="line">			remailSeconds=-<span class="number">1</span>;  <span class="comment">//毫秒转为秒</span></span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;<span class="comment">//秒杀正在进行</span></span><br><span class="line">			status=<span class="number">1</span>;</span><br><span class="line">			remailSeconds=<span class="number">0</span>;  <span class="comment">//毫秒转为秒</span></span><br><span class="line">		&#125;</span><br><span class="line">		model.addAttribute(<span class="string">"status"</span>, status);</span><br><span class="line">		model.addAttribute(<span class="string">"remailSeconds"</span>, remailSeconds);</span><br><span class="line">		GoodsDetailVo gdVo=<span class="keyword">new</span> GoodsDetailVo();</span><br><span class="line">		gdVo.setGoodsVo(goodsVo);</span><br><span class="line">		gdVo.setStatus(status);</span><br><span class="line">		gdVo.setRemailSeconds(remailSeconds);</span><br><span class="line">		gdVo.setUser(user);</span><br><span class="line">		<span class="comment">//将数据填进去，传至页面</span></span><br><span class="line">		<span class="keyword">return</span> Result.success(gdVo);		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>2_4、获取秒杀的path接口，获取地址，并且验证验证码的值是否正确</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value =<span class="string">"/getPath"</span>)</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">getMiaoshaPath</span><span class="params">(HttpServletRequest request,Model model,MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">			@RequestParam(<span class="string">"goodsId"</span>)</span> Long goodsId,</span></span><br><span class="line"><span class="function">			@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"vertifyCode"</span>,defaultValue=<span class="string">"0"</span>)</span> <span class="keyword">int</span> vertifyCode) </span>&#123;</span><br><span class="line">		model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">		<span class="comment">//如果用户为空，则返回至登录页面</span></span><br><span class="line">		<span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//限制访问次数</span></span><br><span class="line">		String uri=request.getRequestURI();</span><br><span class="line">		String key=uri+<span class="string">"_"</span>+user.getId();</span><br><span class="line">		<span class="comment">//限定key5s之内只能访问5次</span></span><br><span class="line">		Integer count=redisService.get(AccessKey.access, key, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span>(count==<span class="keyword">null</span>) &#123;</span><br><span class="line">			redisService.set(AccessKey.access, key, <span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&lt;<span class="number">5</span>) &#123;</span><br><span class="line">			redisService.incr(AccessKey.access, key);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;<span class="comment">//超过5次</span></span><br><span class="line">			<span class="keyword">return</span> Result.error(CodeMsg.ACCESS_LIMIT);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//验证验证码</span></span><br><span class="line">		<span class="keyword">boolean</span> check=miaoshaService.checkVCode(user, goodsId,vertifyCode );</span><br><span class="line">		<span class="keyword">if</span>(!check) &#123;</span><br><span class="line">			<span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEAGAL);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"通过!"</span>);</span><br><span class="line">		<span class="comment">//生成一个随机串</span></span><br><span class="line">		String path=miaoshaService.createMiaoshaPath(user,goodsId);</span><br><span class="line">		System.out.println(<span class="string">"@MiaoshaController-tomiaoshaPath-path:"</span>+path);</span><br><span class="line">		<span class="keyword">return</span> Result.success(path); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>2_5、订单和消息队列接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;path&#125;/do_miaosha_ajaxcache"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Integer&gt; <span class="title">doMiaoshaCache</span><span class="params">(Model model,MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">		@RequestParam(value=<span class="string">"goodsId"</span>,defaultValue=<span class="string">"0"</span>)</span> <span class="keyword">long</span> goodsId,</span></span><br><span class="line"><span class="function">		@<span class="title">PathVariable</span><span class="params">(<span class="string">"path"</span>)</span>String path) </span>&#123;</span><br><span class="line">	model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">	<span class="comment">//1.如果用户为空，则返回至登录页面</span></span><br><span class="line">	<span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//验证path,去redis里面取出来然后验证。</span></span><br><span class="line">	<span class="keyword">boolean</span> check=miaoshaService.checkPath(user,goodsId,path);</span><br><span class="line">	<span class="keyword">if</span>(!check) &#123;</span><br><span class="line">		<span class="keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEAGAL);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.预减少库存，减少redis里面的库存</span></span><br><span class="line">	<span class="keyword">long</span> stock=redisService.decr(GoodsKey.getMiaoshaGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line">	<span class="comment">//3.判断减少数量1之后的stock，区别于查数据库时候的stock&lt;=0</span></span><br><span class="line">	<span class="keyword">if</span>(stock&lt;<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Result.error(CodeMsg.MIAOSHA_OVER_ERROR);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//4.判断这个秒杀订单形成没有，判断是否已经秒杀到了，避免一个账户秒杀多个商品</span></span><br><span class="line">	MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdAndCoodsId(user.getId(), goodsId);</span><br><span class="line">	<span class="keyword">if</span> (order != <span class="keyword">null</span>) &#123;<span class="comment">// 重复下单</span></span><br><span class="line">		<span class="keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//5.正常请求，入队，发送一个秒杀message到队列里面去，入队之后客户端应该进行轮询。</span></span><br><span class="line">	MiaoshaMessage mms=<span class="keyword">new</span> MiaoshaMessage();</span><br><span class="line">	mms.setUser(user);</span><br><span class="line">	mms.setGoodsId(goodsId);</span><br><span class="line">	mQSender.sendMiaoshaMessage(mms);</span><br><span class="line">	<span class="comment">//返回0代表排队中</span></span><br><span class="line">	<span class="keyword">return</span> Result.success(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2_6、秒杀轮询接口，判断用户秒杀是否成功，返回状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Long&gt; <span class="title">doMiaoshaResult</span><span class="params">(Model model, MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">		@RequestParam(value = <span class="string">"goodsId"</span>, defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">long</span> goodsId) </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> result=miaoshaService.getMiaoshaResult(user.getId(),goodsId);</span><br><span class="line">	System.out.println(<span class="string">"轮询 result："</span>+result);</span><br><span class="line">	<span class="keyword">return</span> Result.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2_7、订单判断接口，判断订单是否存在，返回订单页面消息，开始支付</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/detail"</span>)</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;OrderDetailVo&gt; <span class="title">info</span><span class="params">(Model model, MiaoshaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">									  @RequestParam(<span class="string">"orderId"</span>)</span> <span class="keyword">long</span> orderId) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(user==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">		&#125;</span><br><span class="line">		OrderInfo order=orderService.getOrderByOrderId(orderId);</span><br><span class="line">		<span class="keyword">if</span>(order==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> Result.error(CodeMsg.ORDER_NOT_EXIST);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//订单存在的情况</span></span><br><span class="line">		<span class="keyword">long</span> goodsId=order.getGoodsId();</span><br><span class="line">		GoodsVo gVo=goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">		OrderDetailVo oVo=<span class="keyword">new</span> OrderDetailVo();</span><br><span class="line">		oVo.setGoodsVo(gVo);</span><br><span class="line">		oVo.setOrder(order);</span><br><span class="line">		<span class="keyword">return</span> Result.success(oVo);<span class="comment">//返回页面login</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、项目资料等">三、项目资料等</h2>
<p>1、由于代码过多，这里就不全部贴出了<br>
2、项目代码</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1qZjAuce1gRRXHHDHZgDLmw" target="_blank" rel="noopener">https://pan.baidu.com/s/1qZjAuce1gRRXHHDHZgDLmw</a><br>
提取码：iroz</p>
</blockquote>
<p>3、该秒杀项目的视频，来源慕课网 <a href="https://www.imooc.com" target="_blank" rel="noopener">https://www.imooc.com</a></p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1vjBlJ82iiIjBSkEN9hbEsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1vjBlJ82iiIjBSkEN9hbEsA</a><br>
提取码：33qx</p>
</blockquote>
<p>4、借鉴了部分博主的博客，非常感谢</p>
<blockquote>
<p><a href="https://blog.csdn.net/Brad_PiTt7/article/details/90717429" target="_blank" rel="noopener">https://blog.csdn.net/Brad_PiTt7/article/details/90717429</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDataJpa+vue+Echarts绘制柱状图和饼状图</title>
    <url>/blog/2019/05/31/SpringDataJpa+vue+Echarts%E7%BB%98%E5%88%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE%E5%92%8C%E9%A5%BC%E7%8A%B6%E5%9B%BE/</url>
    <content><![CDATA[<p><em>注明：dome源码和sql文末自取</em>。该dome使用了IDEA和vs-code编码工具。idea使用了lombok插件。</p>
<h2 id="一、后端实现">一、后端实现</h2>
<p>1、创建SpringBoot项目，勾选 web、jpa、lombok、mysql、jdbc 启动器，并创建对应的层<br>
2、创建Charts.java实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"charts"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Charts</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>,unique = <span class="keyword">true</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"num"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写dao层，ChartsDao .java接口类，继承<a href="https://www.cnblogs.com/mr-wuxiansheng/p/6189383.html" target="_blank" rel="noopener">JpaRepository</a>接口(不了解可点击查看说明)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChartsDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Charts</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、编写service层，ChartsService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChartsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChartsDao chartsDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Charts&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chartsDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、编写controller层，ChartsController.java,调用servicefindAll方法，查询所有信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChartsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChartsService chartsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Charts&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chartsService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、由于是前后端分离，需要跨域，我这里配置了一个配置类，实现跨域请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        <span class="keyword">final</span> CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//5,有效时长</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、请求返回的部分json数据格式</p>
<blockquote>
<p>[<br>
{<br>
“name”: “java”,<br>
“num”: “200”<br>
},<br>
{<br>
“name”: “c”,<br>
“num”: “150”<br>
},<br>
{<br>
“name”: “c++”,<br>
“num”: “100”<br>
},<br>
{<br>
“name”: “pathon”,<br>
“num”: “100”<br>
}<br>
]</p>
</blockquote>
<h2 id="二、编写vue-Echarts实现柱状图和饼状图">二、编写vue+Echarts实现柱状图和饼状图</h2>
<p>1、创建vue项目： vue init webpack 项目名称，<br>
导入 axios 插件：npm install --save axios vue-axios<br>
导入<a href="https://v-charts.js.org/#/" target="_blank" rel="noopener">v-charts</a>:npm install echarts v-charts --save-dev(v-charts是Echarts的封装，详情可点击查看)</p>
<p>2、在src的main.js下导入插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="keyword">import</span> VCharts <span class="keyword">from</span> <span class="string">'v-charts'</span></span><br><span class="line">Vue.use(VCharts)</span><br><span class="line"><span class="comment">//注册 VueAxios, axios</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>
<p>3、在config下的index.js下进行跨域配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="comment">// 表示以后以/userapi 开头的请求，代理请求 http://localhost:8080</span></span><br><span class="line">      <span class="string">'/userapi'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:8888'</span>, <span class="comment">//后端接口地址</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">//是否允许跨越</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/userapi'</span>: <span class="string">''</span>, <span class="comment">//重写,</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>4、创建vue文件，编写柱状图<br>
4_1、编写柱状图template</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ve-histogram :data=<span class="string">"chartData"</span> :title=<span class="string">"chartTitle"</span> :settings=<span class="string">"chartSettings"</span> :extend=<span class="string">"extend"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ve-histogram</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>
<p>4_2、在data中配置各种显示数据和样式，代码中有详细注释</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="comment">//设置纵坐标文字和显示类型</span></span><br><span class="line">  <span class="keyword">this</span>.chartSettings = &#123;</span><br><span class="line">    yAxisType: [<span class="string">'KMB'</span>],</span><br><span class="line">    yAxisName: [<span class="string">'人数/万'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//选择全局文字，颜色，样式等配置</span></span><br><span class="line">    <span class="keyword">this</span>.extend = &#123;</span><br><span class="line">      barWidth: <span class="number">25</span>,<span class="comment">//设置宽度为15px</span></span><br><span class="line">      <span class="comment">// x轴的文字倾斜</span></span><br><span class="line">      <span class="string">'xAxis.0.axisLabel.rotate'</span>: <span class="number">45</span>,</span><br><span class="line">      <span class="string">'xAxis.0.axisLabel.fontSize'</span>: <span class="number">20</span>,<span class="comment">//x轴文本字体大小</span></span><br><span class="line">      <span class="string">'xAxis.0.axisLabel.fontWeight'</span>: <span class="string">'bold'</span>,<span class="comment">//x轴文本字体粗细</span></span><br><span class="line">      <span class="comment">//设置随机颜色</span></span><br><span class="line">      series: &#123;</span><br><span class="line">        label: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">position</span>: <span class="string">"top"</span> &#125;,</span><br><span class="line">        color: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"#"</span> + (<span class="string">"00000"</span> + ((<span class="built_in">Math</span>.random() * <span class="number">16777215</span> + <span class="number">0.5</span>) &gt;&gt; <span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-6</span>); &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置标题</span></span><br><span class="line">    <span class="keyword">this</span>.chartTitle = &#123;</span><br><span class="line">      <span class="comment">// 文字啥的，用\n可以换行</span></span><br><span class="line">      text: <span class="string">'2019各大编程语言人数排行'</span>,</span><br><span class="line">      x: <span class="string">'25px'</span>,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        fontSize: <span class="number">20</span>,</span><br><span class="line">        fontWeight: <span class="string">'normal'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    chartData: &#123;</span><br><span class="line">      columns: [<span class="string">'name'</span>, <span class="string">'num'</span>],</span><br><span class="line">      rows: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>4_3、编写ajax请求，请求后端数据，绑定到柱状图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载方法</span></span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"init"</span>);</span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">"/userapi/findAll"</span>)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">          app.chartData.rows = response.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>4_4、显示效果<br>
<code>在这里插入代码片</code><img src="https://img-blog.csdnimg.cn/20191113165428104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
5、编写饼状图<br>
5_1、编写饼状图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ve-pie :data=<span class="string">"chartData"</span> :title=<span class="string">"chartTitle"</span> :events=<span class="string">"chartEvents"</span> :settings=<span class="string">"chartSettings"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ve-pie</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>
<p>5_2、在data中设置饼状图样式，和设置数据绑定集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    <span class="comment">//设置饼状图显示样式</span></span><br><span class="line">      <span class="keyword">this</span>.chartSettings = &#123;</span><br><span class="line">        radius: <span class="number">150</span>,<span class="comment">//半径</span></span><br><span class="line">        offsetY: <span class="number">250</span>,<span class="comment">//向下平移多少</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调节显示</span></span><br><span class="line">        label: &#123;</span><br><span class="line">          normal: &#123;</span><br><span class="line">            fontSize: <span class="number">16</span>,<span class="comment">//字体大小</span></span><br><span class="line">            formatter: <span class="string">'&#123;b&#125;'</span> + <span class="string">'\n\r'</span> + <span class="string">'&#123;c&#125;'</span> + <span class="string">'\n\r'</span> + <span class="string">'(&#123;d&#125;%)'</span><span class="comment">//显示那几种数据</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">this</span>.chartTitle = &#123;</span><br><span class="line">        <span class="comment">// 文字啥的，用\n可以换行</span></span><br><span class="line">        text: <span class="string">'2019各大编程语言人数占比排行'</span>,</span><br><span class="line">        x: <span class="string">'25px'</span>,<span class="comment">//向右移动多少</span></span><br><span class="line">        textStyle: &#123;</span><br><span class="line">          fontSize: <span class="number">20</span>,</span><br><span class="line">          fontWeight: <span class="string">'normal'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//饼状图数据绑定</span></span><br><span class="line">      chartData: &#123;</span><br><span class="line">        columns: [<span class="string">'name'</span>, <span class="string">'num'</span>],</span><br><span class="line">        rows: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>5_3、编写加载事件，和查询所有数据事件，通过ajax绑定饼状图数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载查询数据</span></span><br><span class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"init"</span>);</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="comment">//查询所有信息</span></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">"/userapi/findAll"</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//向饼状图绑定数据</span></span><br><span class="line">        app.chartData.rows = response.data;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5_4、显示效果<br>
<img src="https://img-blog.csdnimg.cn/20191113171623234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
6、总结：绘制柱状图和饼状图，主要是对它自己封装的各种属性的配置和数据的绑定。总体来说操作性不难，但是太考验前端的各种属性配置，编写的时候一定要细心。后端比较简单，基本没有难点。</p>
<p>项目源码地址：</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1Sud_cJKc7qo3TIrd7DB97w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Sud_cJKc7qo3TIrd7DB97w</a><br>
提取码：873p</p>
</blockquote>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>springdatajpa+vue实现省市区三级联动</title>
    <url>/blog/2019/05/31/springDataJpa+vue%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="一，编写后端代码">一，编写后端代码</h2>
<p>1、创建springboot项目，添加 web、jpa、lombok、mysql、jdbc 启动器，并创建对应的层</p>
<p>2、编写省，市，区的实体（idea使用了lombok插件），SQL等项目文件文末自取<br>
省份实体类：AddressProvince.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_address_province"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressProvince</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>,unique = <span class="keyword">true</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"code"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>城市实体类：AddressCity.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_address_city"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressCity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>,unique = <span class="keyword">true</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"code"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"provincecode"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区域实体类：AddressTown.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name =<span class="string">"t_address_town"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressTown</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>,unique = <span class="keyword">true</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"code"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"citycode"</span>,nullable = <span class="keyword">false</span>,length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省份dao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProvinceDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AddressProvince</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 城市dao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AddressCity</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现jpa的基本方法，根据省份编号查询城市信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> provinceCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AddressCity&gt; <span class="title">findAddressCityByProvinceCode</span><span class="params">(String provinceCode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区域dao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TownDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AddressTown</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现jpa基本方法，根据城市编号查询区域信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cityCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AddressTown&gt; <span class="title">findAddressTownByCityCode</span><span class="params">(String cityCode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、编写service，调用dao接口方法，返回信息（省略…）<br>
5、编写web，调用service方法，编写省，市，区各个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三级联动controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProvinceService provinceService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CityService cityService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TownService townService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有省份信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"address"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AddressProvince&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> provinceService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据省份编号查询市级信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> provinceCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"addressCity/&#123;provinceCode&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AddressCity&gt; <span class="title">findByprovinceCode</span><span class="params">(@PathVariable(<span class="string">"provinceCode"</span>)</span> String provinceCode)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  cityService.findByprovinceCode(provinceCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据市级编号查询区域信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cityCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"addressTown/&#123;cityCode&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AddressTown&gt; <span class="title">findBycityCode</span><span class="params">(@PathVariable(<span class="string">"cityCode"</span>)</span> String cityCode)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> townService.findBycityCode(cityCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、使用工具Postman测试接口，返回json数据格式</p>
<p>6_1、部分返回的省份json数据</p>
<blockquote>
<p>[<br>
{<br>
“id”: 1,<br>
“code”: “110000”,<br>
“name”: “北京市”<br>
},<br>
{<br>
“id”: 2,<br>
“code”: “120000”,<br>
“name”: “天津市”<br>
},<br>
{<br>
“id”: 3,<br>
“code”: “130000”,<br>
“name”: “河北省”<br>
}<br>
]</p>
</blockquote>
<p>6_2、部分返回的城市json数据</p>
<blockquote>
<p>[<br>
{<br>
“id”: 5,<br>
“code”: “130100”,<br>
“name”: “石家庄市”,<br>
“provinceCode”: “130000”<br>
},<br>
{<br>
“id”: 6,<br>
“code”: “130200”,<br>
“name”: “唐山市”,<br>
“provinceCode”: “130000”<br>
},<br>
{<br>
“id”: 7,<br>
“code”: “130300”,<br>
“name”: “秦皇岛市”,<br>
“provinceCode”: “130000”<br>
}<br>
]</p>
</blockquote>
<p>6_3、返回的部分区域json数据</p>
<blockquote>
<p>[<br>
{<br>
“id”: 37,<br>
“code”: “130101”,<br>
“name”: “市辖区”,<br>
“cityCode”: “130100”<br>
},<br>
{<br>
“id”: 38,<br>
“code”: “130102”,<br>
“name”: “长安区”,<br>
“cityCode”: “130100”<br>
},<br>
{<br>
“id”: 39,<br>
“code”: “130103”,<br>
“name”: “桥东区”,<br>
“cityCode”: “130100”<br>
}<br>
]</p>
</blockquote>
<p>后端总结：后端比较简单，采用的是先查询所有省份信息，如何根据选中的省份，得到省份对应的编号，如何查询对应的城市和区域。当然后端也可以采用jpa的OneToMany的方式，一次性查询出所有的地址信息，返回数据，前端处理。考虑到每次触发方法都要查询所有信息，对数据库请求压力大，所以这样设计。</p>
<h2 id="二，前端VUE-ELEMENT">二，前端VUE+ELEMENT</h2>
<p>1、创建vue项目<br>
2、安装 axios 插件，在当前项目下的终端输入命令: ==npm install --save axios vue-axios==<br>
安装 <a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element</a> 插件，在当前项目下的终端输入命令:==npm i element-ui -S==<br>
3、在 src 文件夹下的程序入口 main.js 中导入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="comment">// element-ui 引入文件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="comment">//注册 VueAxios, axios</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>
<p>4、创建vue文件，编写代码<br>
4_1、使用element下拉组件，编写三级下拉框，具体参数示例可参考<a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element</a>官网介绍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-select v-model=<span class="string">"provinceCode"</span> placeholder=<span class="string">"省份"</span>&gt;</span><br><span class="line">      &lt;el-option</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">"item in AddressProvince"</span></span><br><span class="line">        :key=<span class="string">"item.code"</span></span><br><span class="line">        :label=<span class="string">"item.name"</span></span><br><span class="line">        :value=<span class="string">"item.code"</span></span><br><span class="line">      &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;el-select v-model="cityCode" placeholder="城市"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-option</span></span><br><span class="line"><span class="regexp">        v-for="item  in AddressCity"</span></span><br><span class="line"><span class="regexp">        :key="item.code"</span></span><br><span class="line"><span class="regexp">        :label="item.name"</span></span><br><span class="line"><span class="regexp">        :value="item.code"</span></span><br><span class="line"><span class="regexp">      &gt;&lt;/</span>el-option&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-select v-model="value" placeholder="区域"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-option</span></span><br><span class="line"><span class="regexp">        v-for="item   in AddressTown"</span></span><br><span class="line"><span class="regexp">        :key="item.code"</span></span><br><span class="line"><span class="regexp">        :label="item.name"</span></span><br><span class="line"><span class="regexp">        :value="item.code"</span></span><br><span class="line"><span class="regexp">      &gt;&lt;/</span>el-option&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>
<p>4_2、上方页面使用了vue.js的v-model和v-for绑定了下方data</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    AddressCity: [],<span class="comment">//城市集合</span></span><br><span class="line">    AddressProvince: [],<span class="comment">//省份集合</span></span><br><span class="line">    AddressTown: [],<span class="comment">//区域集合</span></span><br><span class="line">    provinceCode: <span class="string">''</span>,<span class="comment">//获取选中时的省份编号</span></span><br><span class="line">    cityCode: <span class="string">''</span>,<span class="comment">//获取选中时的城市编号</span></span><br><span class="line">    value: <span class="string">''</span>&#125;<span class="comment">//获取选中时区域的编号</span></span><br></pre></td></tr></table></figure>
<p>4_3、在config文件夹下的index.js中配置跨域请求路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">     <span class="comment">// 表示以后以/pctapi 开头的请求，代理请求 http://localhost:8888</span></span><br><span class="line">     <span class="string">'/pctapi'</span>: &#123;</span><br><span class="line">       target: <span class="string">'http://localhost:8888'</span>, <span class="comment">//后端接口地址</span></span><br><span class="line">       changeOrigin: <span class="literal">true</span>, <span class="comment">//是否允许跨越</span></span><br><span class="line">       pathRewrite: &#123;</span><br><span class="line">         <span class="string">'^/pctapi'</span>: <span class="string">''</span>, <span class="comment">//重写,</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>5、编写请求方法<br>
5_1、在methods中编写加载init方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">init () &#123;</span><br><span class="line">     <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">     axios.get(<span class="string">"pctapi/address"</span>).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// handle success</span></span><br><span class="line">       app.AddressProvince = resp.data;<span class="comment">//绑定到省份集合</span></span><br><span class="line">     &#125;)</span><br><span class="line">       .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// handle error</span></span><br><span class="line">         <span class="built_in">console</span>.log(error);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>5_2、在methods在编写，查询城市findByprovinceCode 和查询区域findBycityCode 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询城市信息</span></span><br><span class="line">    findByprovinceCode () &#123;</span><br><span class="line">      <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">      axios.get(<span class="string">"/pctapi/addressCity/"</span> + app.provinceCode).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        app.AddressCity = resp.data;</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//查询区域信息</span></span><br><span class="line">    findBycityCode () &#123;</span><br><span class="line">      <span class="keyword">var</span> app = <span class="keyword">this</span>;</span><br><span class="line">      axios.get(<span class="string">"/pctapi/addressTown/"</span> + app.cityCode).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">        app.AddressTown = resp.data;</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>6、在created中调用init方法，实现初始化请求，使页面加载时查询省份信息，并绑定到AddressProvince 省份集合中，使省份下拉框具有初始值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>7、在watch中编写监控省份和城市编号的方法，实现当选中省份使provinceCode值发生变化时，触发对应方法查询城市信息，区域同上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;<span class="comment">//监控一个值的变换</span></span><br><span class="line">  provinceCode: &#123; <span class="comment">// </span></span><br><span class="line">    handler () &#123;</span><br><span class="line">    <span class="comment">//在选中省份发生变化时，清空后方城市和区域集合的值，和绑定编号的值，</span></span><br><span class="line">    <span class="comment">//重新查询对应选中编号的城市和区域值</span></span><br><span class="line">      <span class="keyword">this</span>.AddressCity = [];</span><br><span class="line">      <span class="keyword">this</span>.AddressTown = [];</span><br><span class="line">      <span class="keyword">this</span>.cityCode = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">this</span>.value = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">this</span>.findByprovinceCode();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  cityCode: &#123;</span><br><span class="line">    handler () &#123;</span><br><span class="line">      <span class="keyword">this</span>.findBycityCode();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、运行截图<br>
<img src="https://img-blog.csdnimg.cn/20191112200617405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="vue三级联动运行截图"><br>
9、总结：前端vue项目，主要使用了element的页面，使用了axios的ajax发送请求，获取数据，v-for,v-model绑定数据。整体操作较简单。</p>
<p>后端项目源码和vue页面源码和SQL文件需要自取：</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/15yT8iuJK_STvxgQxs-Rsxg" target="_blank" rel="noopener">https://pan.baidu.com/s/15yT8iuJK_STvxgQxs-Rsxg</a><br>
提取码：ljal</p>
</blockquote>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot,JDBC连接数据库报错：java.lang.AbstractMethodError&#39;:oracle.jdbc.driver.T4CConnection.isValid(I)Z”</title>
    <url>/blog/2019/05/31/SpringBoot,JDBC%E8%BF%9E%E6%8E%A5oracle%E6%8A%A5%E9%94%99java.lang.AbstractMethodError_%20oracle.jdbc.driver.T4CConnection.isValid(I)Z/</url>
    <content><![CDATA[<p>问题：使用springboot，jdbc连接oracle10g数据库，启动项目报错<br>
java.lang.AbstractMethodError:oracle.jdbc.driver.T4CConnection.isValid(I)Z</p>
<p>原因：oracle的jdbc连接包与jdk版本不匹配导致的，如果使用的是ojdbc14版本的，该版本不支持jdk1.8，建议更换ojdbc版本，如ojdbc8。</p>
<p>由于oracle部分版本，Maven坐标无法下载导入的，所以需要自己手动导入。</p>
<p>解决：<br>
1、下载连接驱动包<br>
1_1、建议去oracle官网下载驱动包：<a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">https://www.oracle.com/index.html</a><br>
1_2、百度网盘下载：</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1YrjbA9QizJMN0J_lsD0Vug" target="_blank" rel="noopener">https://pan.baidu.com/s/1YrjbA9QizJMN0J_lsD0Vug</a><br>
提取码：1ncu</p>
</blockquote>
<p>2、将下载的jar包放到一个文件夹，执行cmd命令将jar包导入到你的maven仓库<br>
执行的命令：</p>
<blockquote>
<p>mvn install:install-file -Dfile=E:/ojdbc8.jar -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.2.0.1 -Dpackaging=jar</p>
</blockquote>
<p>注意：<br>
1、install-file -Dfile==》指的是你刚刚下载jar包保存的地址，也就是你执行cmd是文件夹<br>
2、DgroupId DartifactId Dversion 其实就是 maven的这几个参数</p>
<p>3、导入坐标</p>
<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;com.oracle&lt;/groupId&gt;
        &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;
        &lt;version&gt;12.2.0.1&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>
<p>我这里是IDEA+jdk1.8+jdbc8,如果你的jdk是1.7或1.6就选择ojbc7,6等等</p>
]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用java爬虫爬取网站前台代码（html+css+js+img）</title>
    <url>/blog/2019/05/31/%E4%BD%BF%E7%94%A8java%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%EF%BC%88html+css+js+img%EF%BC%89/</url>
    <content><![CDATA[<h1>使用java爬虫爬取网站前台代码（html+css+js+img）</h1>
<h2 id="一、爬虫">一、爬虫</h2>
<p>1、什么是爬虫<br>
爬虫主要针对与网络网页，又称网络爬虫、网络蜘蛛，可以自动化浏览网络中的信息，或者说是一种网络机器人。它们被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。它们可以自动采集所有其能够访问到的页面内容，以便程序做下一步的处理。<br>
2、为什么我们要爬取数据<br>
在大数据时代,我们要获取更多数据,就要进行数据的挖掘、分析、筛选,比如当我们做一个项目的时候,需要大量真实的数据的时候,就需要去某些网站进行爬取,有些网站的数据爬取后保存到数据库还不能够直接使用,需要进行清洗、过滤后才能使用,我们知道有些数据是非常珍贵的。</p>
<h2 id="二、Jsoup">二、Jsoup</h2>
<p>1、什么是Jsoup<br>
jsoup 是一款 Java 的HTML 解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于JQuery的操作方法来取出和操作数据。该版本包含一个支持 HTML5 的解析器分支，可确保跟现在的浏览器一样解析 HTML 的方法，同时降低了解析的时间和内存的占用。<br>
2、Jsoup主要功能<br>
2_1、从一个URL，文件或字符串中解析HTML；<br>
2_2、使用DOM或CSS选择器来查找、取出数据；<br>
2_3、可操作HTML元素、属性、文本<br>
详细介绍参考：<a href="https://www.cnblogs.com/zhangyinhua/p/8037599.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangyinhua/p/8037599.html</a></p>
<p>三、创建项目<br>
1、pom文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.googlecode.juniversalchardet&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;juniversalchardet&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0.3&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.kie.modules&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;org-apache-commons-httpclient&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;6.2.0.CR2&lt;/version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.10.3&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.0.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>2、以正版中国网站为例，首先我们先获取页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestAndResponseTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Page  <span class="title">sendRequstAndGetResponse</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        Page page = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1.生成 HttpClinet 对象并设置参数</span></span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="comment">// 设置 HTTP 连接超时 5s</span></span><br><span class="line">        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 2.生成 GetMethod 对象并设置参数</span></span><br><span class="line">        GetMethod getMethod = <span class="keyword">new</span> GetMethod(url);</span><br><span class="line">        <span class="comment">// 设置 get 请求超时 5s</span></span><br><span class="line">        getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 设置请求重试处理</span></span><br><span class="line">        getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, <span class="keyword">new</span> DefaultHttpMethodRetryHandler());</span><br><span class="line">        <span class="comment">// 3.执行 HTTP GET 请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> statusCode = httpClient.executeMethod(getMethod);</span><br><span class="line">        <span class="comment">// 判断访问的状态码</span></span><br><span class="line">            <span class="keyword">if</span> (statusCode != HttpStatus.SC_OK) &#123;</span><br><span class="line">                System.err.println(<span class="string">"Method failed: "</span> + getMethod.getStatusLine());</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 4.处理 HTTP 响应内容</span></span><br><span class="line">            <span class="keyword">byte</span>[] responseBody = getMethod.getResponseBody();<span class="comment">// 读取为字节 数组</span></span><br><span class="line">            String contentType = getMethod.getResponseHeader(<span class="string">"Content-Type"</span>).getValue(); <span class="comment">// 得到当前返回类型</span></span><br><span class="line"></span><br><span class="line">            page = <span class="keyword">new</span> Page(responseBody,url,contentType); <span class="comment">//封装成为页面</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (HttpException e) &#123;</span><br><span class="line">        <span class="comment">// 发生致命的异常，可能是协议不对或者返回的内容有问题</span></span><br><span class="line">            System.out.println(<span class="string">"Please check your provided http address!"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// 发生网络异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放连接</span></span><br><span class="line">            getMethod.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、获取响应内容，放入page</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content ;</span><br><span class="line">    <span class="keyword">private</span> String html ;  <span class="comment">//网页源码字符串</span></span><br><span class="line">    <span class="keyword">private</span> Document doc  ;<span class="comment">//网页Dom文档</span></span><br><span class="line">    <span class="keyword">private</span> String charset ;<span class="comment">//字符编码</span></span><br><span class="line">    <span class="keyword">private</span> String url ;<span class="comment">//url路径</span></span><br><span class="line">    <span class="keyword">private</span> String contentType ;<span class="comment">// 内容类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">byte</span>[] content , String url , String contentType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content ;</span><br><span class="line">        <span class="keyword">this</span>.url = url ;</span><br><span class="line">        <span class="keyword">this</span>.contentType = contentType ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCharset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> charset;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> url ;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> contentType ;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getContent()&#123; <span class="keyword">return</span> content ;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(<span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回网页的源码字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 网页的源码字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHtml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (html != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(charset==<span class="keyword">null</span>)&#123;</span><br><span class="line">            charset = CharsetDetector.guessEncoding(content); <span class="comment">// 根据内容来猜测 字符编码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.html = <span class="keyword">new</span> String(content, charset);</span><br><span class="line">            <span class="keyword">return</span> html;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  得到文档</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Document <span class="title">getDoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (doc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.doc = Jsoup.parse(getHtml(), url);</span><br><span class="line">            <span class="keyword">return</span> doc;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、储存爬取的网页文本数据，FileTool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dirPath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getMethod.getResponseHeader("Content-Type").getValue()</span></span><br><span class="line"><span class="comment">     * 根据 URL 和网页类型生成需要保存的网页的文件名，去除 URL 中的非文件名字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFileNameByUrl</span><span class="params">(String url, String contentType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去除 http://</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//text/html 类型</span></span><br><span class="line">        <span class="keyword">if</span> (contentType.indexOf(<span class="string">"html"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">           url = url.replaceAll(<span class="string">"[\\?/:*|&lt;&gt;\"]"</span>, <span class="string">"_"</span>) + <span class="string">".html"</span>;</span><br><span class="line">           <span class="keyword">return</span> url;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = url.lastIndexOf(<span class="string">"/"</span>);</span><br><span class="line">            url = url.substring(i+<span class="number">1</span>,url.length());</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  生成目录</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dirPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dirPath = Class.class.getClass().getResource("/").getPath() + "temp\\";</span><br><span class="line">        &#125;</span><br><span class="line">        File fileDir = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">        <span class="keyword">if</span> (!fileDir.exists()) &#123;</span><br><span class="line">            fileDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存网页字节数组到本地文件，filePath 为要保存的文件的相对地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveToLocal</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        mkdir();</span><br><span class="line">        String fileName = getFileNameByUrl(page.getUrl(), page.getContentType()) ;</span><br><span class="line"></span><br><span class="line">        String filePath = dirPath + fileName ;</span><br><span class="line">        <span class="keyword">byte</span>[] data = page.getContent();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            DataOutputStream out = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath)));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                out.write(data[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            System.out.println(<span class="string">"文件："</span>+ fileName + <span class="string">"已经被存储在"</span>+ filePath  );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、主方法，配置网站路径和css，js，img的路径过滤，配置爬取文件存储地址，并获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCrawler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用种子初始化 URL 队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seeds 种子 URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCrawlerWithSeeds</span><span class="params">(String[] seeds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seeds.length; i++)&#123;</span><br><span class="line">            Links.addUnvisitedUrlQueue(seeds[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抓取过程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seeds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crawling2</span><span class="params">(String[] seeds)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化 URL 队列</span></span><br><span class="line">        initCrawlerWithSeeds(seeds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义过滤器，提取以 http://www.baidu.com 开头的链接</span></span><br><span class="line">        LinkFilter filter = <span class="keyword">new</span> LinkFilter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">"https://getitfree.cn/"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        URL url;</span><br><span class="line">        <span class="keyword">int</span> responsecode;</span><br><span class="line">        HttpURLConnection urlConnection;</span><br><span class="line">        BufferedReader reader;</span><br><span class="line">        String line;</span><br><span class="line">        String filePath=<span class="string">"F:\\IDEAProject\\crawl\\crawl\\target\\classes\\temp\\index.html"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环条件：待抓取的链接不空且抓取的网页不多于 1000</span></span><br><span class="line">        <span class="keyword">while</span> (!Links.unVisitedUrlQueueIsEmpty()  &amp;&amp; Links.getVisitedUrlNum() &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先从待访问的序列中取出第一个；</span></span><br><span class="line">            String visitUrl = (String) Links.removeHeadOfUnVisitedUrlQueue();</span><br><span class="line">            <span class="keyword">if</span> (visitUrl == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据URL得到page;</span></span><br><span class="line">            Page page = RequestAndResponseTool.sendRequstAndGetResponse(visitUrl);</span><br><span class="line">            Elements es = PageParserTool.select(page,<span class="string">"img"</span>);</span><br><span class="line">            Iterator iterator  = es.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                Element element = (Element) iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (element.hasAttr(<span class="string">"href"</span>)) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.hasAttr(<span class="string">"src"</span>)) &#123;</span><br><span class="line">                    String src = element.attr(<span class="string">"src"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (src.indexOf(<span class="string">"?"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    src = src.substring(src.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    element.attr(<span class="string">"src"</span>, src);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            es =PageParserTool.select(page,<span class="string">"link"</span>);</span><br><span class="line">            iterator  = es.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                Element element = (Element) iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (element.hasAttr(<span class="string">"href"</span>)) &#123;</span><br><span class="line">                    String href = element.attr(<span class="string">"href"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (href.indexOf(<span class="string">"?"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    href = href.substring(href.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    element.attr(<span class="string">"href"</span>, href);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.hasAttr(<span class="string">"src"</span>)) &#123;</span><br><span class="line">                    String src = element.attr(<span class="string">"src"</span>);</span><br><span class="line">                    src = src.substring(src.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    element.attr(<span class="string">"src"</span>, src);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            es =PageParserTool.select(page,<span class="string">"script"</span>);</span><br><span class="line">            iterator  = es.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">                Element element = (Element) iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (element.hasAttr(<span class="string">"href"</span>)) &#123;</span><br><span class="line">                    String href = element.attr(<span class="string">"href"</span>);</span><br><span class="line">                    <span class="comment">//System.out.println("src:" + src);</span></span><br><span class="line">                    href = href.substring(href.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    element.attr(<span class="string">"href"</span>, href);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.hasAttr(<span class="string">"src"</span>)) &#123;</span><br><span class="line">                    String src = element.attr(<span class="string">"src"</span>);</span><br><span class="line">                    <span class="comment">//System.out.println("src:" + src);</span></span><br><span class="line">                    <span class="keyword">if</span> (src.indexOf(<span class="string">"?"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    src = src.substring(src.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                    element.attr(<span class="string">"src"</span>, src);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">                ps.append(page.getDoc().toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crawling</span><span class="params">(String[] seeds)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化 URL 队列</span></span><br><span class="line">        initCrawlerWithSeeds(seeds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义过滤器，提取以 http://www.baidu.com 开头的链接</span></span><br><span class="line">        LinkFilter filter = <span class="keyword">new</span> LinkFilter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">"https://getitfree.cn/"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环条件：待抓取的链接不空且抓取的网页不多于 1000</span></span><br><span class="line">        <span class="keyword">while</span> (!Links.unVisitedUrlQueueIsEmpty()  &amp;&amp; Links.getVisitedUrlNum() &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先从待访问的序列中取出第一个；</span></span><br><span class="line">            String visitUrl = (String) Links.removeHeadOfUnVisitedUrlQueue();</span><br><span class="line">            <span class="keyword">if</span> (visitUrl == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据URL得到page;</span></span><br><span class="line">            Page page = RequestAndResponseTool.sendRequstAndGetResponse(visitUrl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//将保存文件</span></span><br><span class="line">            FileTool.saveToLocal(page);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将已经访问过的链接放入已访问的链接中；</span></span><br><span class="line">            Links.addVisitedUrlSet(visitUrl);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到超链接</span></span><br><span class="line">            Set&lt;String&gt; links = PageParserTool.getLinks(page,<span class="string">"img"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String link : links) &#123;</span><br><span class="line">                Links.addUnvisitedUrlQueue(link);</span><br><span class="line">                System.out.println(<span class="string">"新增爬取路径: "</span> + link);</span><br><span class="line">            &#125;</span><br><span class="line">            links = PageParserTool.getLinks(page,<span class="string">"script"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String link : links) &#123;</span><br><span class="line">                Links.addUnvisitedUrlQueue(link);</span><br><span class="line">                System.out.println(<span class="string">"新增爬取路径: "</span> + link);</span><br><span class="line">            &#125;</span><br><span class="line">            links = PageParserTool.getLinks(page,<span class="string">"link"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String link : links) &#123;</span><br><span class="line">                Links.addUnvisitedUrlQueue(link);</span><br><span class="line">                System.out.println(<span class="string">"新增爬取路径: "</span> + link);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main 方法入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCrawler crawler = <span class="keyword">new</span> MyCrawler();</span><br><span class="line">        crawler.crawling2(<span class="keyword">new</span> String[]&#123;<span class="string">"https://getitfree.cn/"</span>&#125;);</span><br><span class="line">        crawler.crawling(<span class="keyword">new</span> String[]&#123;<span class="string">"https://getitfree.cn/"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>四、爬取结果和dome源码等<br>
1、结果<br>
<img src="https://img-blog.csdnimg.cn/20191120201810607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2019112020183150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
2、该博客只有部分代码，如果需要dome源码，自取</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1THFARMlsbY_s51-LYWZZGw" target="_blank" rel="noopener">https://pan.baidu.com/s/1THFARMlsbY_s51-LYWZZGw</a><br>
提取码：nezg</p>
</blockquote>
<p>3、路还很长，乘风破浪，各位加油！！！！</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP中使用JSTL</title>
    <url>/blog/2019/05/11/JSP%E4%B8%ADJSTL%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1>JSP中JSTL学习</h1>
<p>&lt;%@ page language=“java” import=“java.util.*” pageEncoding=“utf-8”%&gt;<br>
&lt;%@taglib prefix=“c” uri=“<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a>” %&gt;<br>
&lt;%–<br>
JSTL学习：<br>
<strong>作用：</strong><br>
提高jsp中的逻辑代码编写效率，使用标签<br>
<strong>使用：</strong><br>
JSTL的核心标签库<br>
JSTL的格式化标签库<br>
JSTL的sql标签库<br>
JSTL的xml标签库<br>
<strong>JSTL的核心标签库：</strong><br>
1、导入jar包<br>
2、声明jstl标签库的引入（核心标签库）<br>
&lt;%@taglib prefix=“c” uri=“<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a>” %&gt;<br>
3、内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">基本标签：</span><br><span class="line">	&lt;c:out value="数据" default="默认值"&gt;&lt;/c:out&gt;</span><br><span class="line">		数据可以作为常量也可以是EL表达式。</span><br><span class="line">		作用：将数据输出给客户端</span><br><span class="line">	&lt;c:set var="hello" value="hello page" scope="page"&gt;&lt;/c:set&gt;</span><br><span class="line">		作用：存储数据到作用域中</span><br><span class="line">		<span class="keyword">var</span>：表示存储的键名</span><br><span class="line">		value：表示存储的数据</span><br><span class="line">		scope：表示要存储的作用域对象page request session application</span><br><span class="line">	&lt;c:remove <span class="keyword">var</span>=<span class="string">"hello"</span> scope=<span class="string">"page"</span>/&gt;&lt;br/&gt;</span><br><span class="line">		作用：删除作用域中的指定键数据</span><br><span class="line">		<span class="keyword">var</span>：表示存储的键名</span><br><span class="line">		scope：表示要删除的作用域</span><br><span class="line">		注意：</span><br><span class="line">			如果不指定作用域，则删除所有</span><br><span class="line">逻辑标签：</span><br><span class="line">	&lt;c:if test="$&#123;表达式&#125;"&gt;前端代码&lt;/c:if&gt;	</span><br><span class="line">		作用：进行逻辑判断，相当于java代码的单分支判断</span><br><span class="line">		注意：</span><br><span class="line">			逻辑判断标签需要依赖于El的逻辑运算，也就是表达式中涉及到的数据必须从作用域中获取</span><br><span class="line">	&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test="条件"&gt;判断成功执行内容&lt;/c:when&gt;</span><br><span class="line">	&lt;c:when test=""&gt;&lt;/c:when&gt;</span><br><span class="line">	.........</span><br><span class="line">	</span><br><span class="line">	&lt;c:otherwise&gt;判断都不成立执行&lt;/c:otherwise&gt;</span><br><span class="line">	&lt;/c:choose&gt;</span><br><span class="line">		作用：用来进行多条件的逻辑判断，类似java的多分枝语句</span><br><span class="line">		注意：</span><br><span class="line">			条件成立只会执行一次，都不成立执行otherwise-</span><br><span class="line">	</span><br><span class="line">循环标签：</span><br><span class="line">	&lt;c:forEach begin="1" end="4" step="2"&gt;循环体&lt;br/&gt;&lt;/c:forEach&gt;</span><br><span class="line">		作用：</span><br><span class="line">			循环内容进行处理</span><br><span class="line">		使用：</span><br><span class="line">			begin：声明循环开始位置</span><br><span class="line">			end：声明循环结束位置</span><br><span class="line">			step：每次循环长度</span><br><span class="line">			VarStatus：声明变量记录每次循环的数据（角标，次数，是否是第一次循环，是否是最后一次循环）</span><br><span class="line">				$&#123;vs.index&#125;---$&#123;vs.count&#125;--$&#123;vs.first&#125;---$&#123;vs.last&#125;&lt;br/&gt;&lt;/c:forEach&gt;</span><br><span class="line">				注意：数据存储在作用域中，需要使用El表达式获取</span><br><span class="line">			items:声明要遍历的对象，结合EL表达式获取对象</span><br><span class="line">			<span class="keyword">var</span>:声明变量记录每次循环的结果，结果存储在El表达式中，需要使用El表达式获取。</span><br></pre></td></tr></table></figure>
<h3 id="基本标签学习">基本标签学习</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> &lt;%</span><br><span class="line"> 	request.setAttribute(<span class="string">"str"</span>, <span class="string">"学习使我快乐"</span>);</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:out <span class="attribute">value</span>=<span class="string">"哈哈"</span>&gt;&lt;/c:out&gt;----$&#123;str&#125;&lt;br/&gt;</span><br><span class="line">&lt;c:out <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;str2&#125;</span>"</span> <span class="attribute">default</span>=<span class="string">"哈哈11"</span>&gt;&lt;/c:out&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:<span class="builtin-name">set</span> <span class="attribute">var</span>=<span class="string">"hello"</span> <span class="attribute">value</span>=<span class="string">"hello page"</span> <span class="attribute">scope</span>=<span class="string">"page"</span>&gt;&lt;/c:set&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:<span class="builtin-name">set</span> <span class="attribute">var</span>=<span class="string">"hello"</span> <span class="attribute">value</span>=<span class="string">"hello request"</span> <span class="attribute">scope</span>=<span class="string">"request"</span>&gt;&lt;/c:set&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:<span class="builtin-name">set</span> <span class="attribute">var</span>=<span class="string">"hello"</span> <span class="attribute">value</span>=<span class="string">"hello request"</span> <span class="attribute">scope</span>=<span class="string">"session"</span>&gt;&lt;/c:set&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:<span class="builtin-name">set</span> <span class="attribute">var</span>=<span class="string">"hello"</span> <span class="attribute">value</span>=<span class="string">"hello application"</span> <span class="attribute">scope</span>=<span class="string">"application"</span>&gt;&lt;/c:set&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:out <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;hello&#125;</span>"</span>&gt;&lt;/c:out&gt;</span><br><span class="line">&lt;c:out <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;sessionScope.hello&#125;</span>"</span>&gt;&lt;/c:out&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:<span class="builtin-name">remove</span> <span class="attribute">var</span>=<span class="string">"hello"</span> <span class="attribute">scope</span>=<span class="string">"page"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;c:out <span class="attribute">value</span>=<span class="string">"<span class="variable">$&#123;hello&#125;</span>"</span>&gt;&lt;/c:out&gt; &lt;br/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="逻辑标签学习">逻辑标签学习</h3>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;a&gt;3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">b</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"xx"</span> <span class="attr">value</span>=<span class="string">"85"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;xx&gt;=90&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">i</span>&gt;</span>快乐<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;xx&lt;90&amp;&amp;xx&gt;=80&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">i</span>&gt;</span>了啦啦啦<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;xx&lt;80&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">i</span>&gt;</span>男男女女女<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">i</span>&gt;</span>中<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="循环标签学习">循环标签学习</h3>
<h4 id="常量循环">常量循环</h4>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">c</span>:forEach begin=<span class="string">"1"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"vs"</span>&gt;<span class="number">1111</span>---$&#123;<span class="keyword">vs</span>.<span class="built_in">index</span>&#125;---$&#123;<span class="keyword">vs</span>.<span class="built_in">count</span>&#125;--$&#123;<span class="keyword">vs</span>.<span class="keyword">first</span>&#125;---$&#123;<span class="keyword">vs</span>.<span class="keyword">last</span>&#125;&lt;<span class="keyword">br</span>/&gt;&lt;/<span class="keyword">c</span>:forEach&gt;</span><br></pre></td></tr></table></figure>
<h4 id="动态循环List">动态循环List</h4>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="xml">JSP中存入request域值</span></span><br><span class="line"><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">ArrayList&lt;<span class="built_in">String</span>&gt; str=<span class="keyword">new</span> ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="vbscript">   str.add(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="vbscript">   str.add(<span class="string">"b"</span>);</span></span><br><span class="line"><span class="vbscript">   str.add(<span class="string">"c"</span>);</span></span><br><span class="line"><span class="vbscript">   <span class="built_in">request</span>.setAttribute(<span class="string">"list"</span>, str);</span></span><br><span class="line"><span class="vbscript">%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"str"</span> &gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;str&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;str&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;str&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="动态循环Map">动态循环Map</h4>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">HashMap&lt;String ,String&gt; <span class="keyword">map</span>=new HashMap&lt;String,String&gt;();</span><br><span class="line"> 		 <span class="keyword">map</span>.put(<span class="string">"1"</span>, <span class="string">"a"</span>);</span><br><span class="line">   		 <span class="keyword">map</span>.put(<span class="string">"2"</span>, <span class="string">"b"</span>);</span><br><span class="line">     	 <span class="keyword">map</span>.put(<span class="string">"3"</span>, <span class="string">"c"</span>);</span><br><span class="line">     	 request.setAttribute(<span class="string">"map"</span>, <span class="keyword">map</span>);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;map&#125;"</span> <span class="attr">var</span>=<span class="string">"map"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		</span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			</span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="xquery">&#123;<span class="keyword">map</span><span class="built_in">.key</span>&#125;</span><span class="xml">---$</span><span class="xquery">&#123;<span class="keyword">map</span>.<span class="keyword">value</span>&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			</span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="xquery">&#123;<span class="keyword">map</span><span class="built_in">.key</span>&#125;</span><span class="xml">---$</span><span class="xquery">&#123;<span class="keyword">map</span>.<span class="keyword">value</span>&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 			</span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="xquery">&#123;<span class="keyword">map</span><span class="built_in">.key</span>&#125;</span><span class="xml">---$</span><span class="xquery">&#123;<span class="keyword">map</span>.<span class="keyword">value</span>&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JSTL</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建SpringCloud环境</title>
    <url>/blog/2019/04/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASpringCloud%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>前言：在我上篇博客中，详细介绍了，Spring Cloud的一些概念和组件，如果你是新手，建议你可以先去看看：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_44209403/article/details/103493907" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44209403/article/details/103493907</a></p>
</blockquote>
<h2 id="一、项目搭建">一、项目搭建</h2>
<p>下面我们来一步步搭建spring Cloud生产环境（如果你是老手可以跳过这里）<br>
下面我是通过截图一步步来演示的。<br>
<img src="https://img-blog.csdnimg.cn/20191212103543327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2019121210361827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212103737121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2019121210374659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212103759116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212103859787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
同时到父项目的pom.xml中导入我们的依赖，进行子项目的依赖版本控制<br>
<img src="https://img-blog.csdnimg.cn/20191212135321678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>pom.xml文件</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.xkkj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloudparent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;springcloudparent&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;springCloud父级项目&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!--springCloud--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>到这里我们的父项目就建好了，因为我们使用的是Spring Cloud微服务，所以框架结构为一个基座+多个子模块，该项目就是用来管理子项目依赖，和提供一个统一的工作区间。</p>
<p><strong>1、创建Eureka注册中心</strong><br>
如果你看过我的上篇帖子或者了解过Spring Cloud相关组件，你应该知道，Eureka是服务的管理者（服务注册和发现）。,而我们的微服务就是把一整个后台应用拆分成小的功能模块, 那么这些模块之间就是通过将服务注册到Eureka，通过注册中心来相互通信的?<br>
那么我们现在就来创建Eureka注册中心项目<br>
<img src="https://img-blog.csdnimg.cn/20191212135549519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212140237932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/2019121214025297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212145845779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>pom.xml文件</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloudparent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.xkkj&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;SpringCloud-EureKa&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--eureka服务端--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191212150021304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<strong>启动类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EureKaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EureKaApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20191212150033366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
配置application.yml, 其实application.properties和application.yml这两个配置文件都可以配置工程, 只不过相比之下yml更直观一些,不过请注意缩进, 因为yml使用缩进来区分不同字段的<br>
<strong><strong>yml配置文件：</strong></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  # 配置服务端口</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # 配置eureka服务器地址</span><br><span class="line">      defaultZone: http:<span class="comment">//127.0.0.1:8081/eureka</span></span><br><span class="line">    #是否需要将自己注册到注册中心(注册中心集群需要设置为true)</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">    #是否需要搜索服务信息 因为自己是注册中心所以为false</span><br><span class="line">    fetch-registry: <span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>注意：这里如果yml文件运行时候报错，请先将中文注释删除，或者修改编码格式。<br>
下面我们去自己的启动类，启动项目，启动后，我们可以看到日志输出<br>
<img src="https://img-blog.csdnimg.cn/20191212152023453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
那么我们现在通过浏览器访问注册中心客户端：<strong><a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></strong><br>
<img src="https://img-blog.csdnimg.cn/20191212152322266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
我们可以正确访问，就说明我们的注册中心配置好了，是不是很简单呢。</p>
<h2 id="二、创建微服务">二、创建微服务</h2>
<p>刚刚我们创建了注册中心，现在我们就来创建两个服务，待会我们来实现他们自己的调用关系。</p>
<p><img src="https://img-blog.csdnimg.cn/20191212153124695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212153137217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
下面我们分别导入maven坐标和创建启动类和配置文件<br>
pom.xml,两个项目都导入下方这个坐标</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--eureka客户端--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--web--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>分别创建启动类<br>
<img src="https://img-blog.csdnimg.cn/20191212154938405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
启动类A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceAApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动类B</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceBApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>yml配置A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  # 服务端口号</span><br><span class="line">  port: <span class="number">8888</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 服务名称 - 服务之间使用名称进行通讯</span><br><span class="line">    name: service-a</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # 填写注册中心服务器地址</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8081/eureka</span></span><br><span class="line">    # 是否需要将自己注册到注册中心</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    # 是否需要搜索服务信息</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">  instance:</span><br><span class="line">    # 使用ip地址注册到注册中心</span><br><span class="line">    prefer-ip-address: <span class="keyword">true</span></span><br><span class="line">    # 注册中心列表中显示的状态参数</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>
<p>yml配置B</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  # 服务端口号</span><br><span class="line">  port: <span class="number">9999</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    # 服务名称-服务之间使用名称进行通讯</span><br><span class="line">    name: service-b</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      # 填写注册中心服务器地址</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8081/eureka</span></span><br><span class="line">    # 是否需要将自己注册到注册中心</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    # 是否需要搜索服务信息</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">  instance:</span><br><span class="line">    # 使用ip地址注册到注册中心</span><br><span class="line">    prefer-ip-address: <span class="keyword">true</span></span><br><span class="line">    # 注册中心列表中显示的状态参数</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们运行两个服务看看效果</p>
<p><img src="https://img-blog.csdnimg.cn/201912121640014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212163723274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
启动后，我们可以去注册中心看看，你会发现我们的服务已经注册到了注册中心<br>
<img src="https://img-blog.csdnimg.cn/20191212163912913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
那么接下来我们就通过部分代码来让大家看看效果</p>
<p>首先我们到Service-A中编写一个接口，创建controller<br>
<img src="https://img-blog.csdnimg.cn/20191212164528339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
HelloWorldController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"欢迎来到Spring Cloud微服务的世界！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们重启Service-A项目<br>
访问：<a href="http://localhost:8888/hello" target="_blank" rel="noopener">http://localhost:8888/hello</a><br>
<img src="https://img-blog.csdnimg.cn/20191212165733807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
访问成功，但是现在这种访问方式只是我们平时单模块开发时，项目的服务方式，这里都没有使用到注册中心，所以我们现在使用Service-B访问Service-A的接口，该如何实现呢。下面我们一起来看看</p>
<p>要想Service-B调用Service-A，就需要用到eurka(注册中心)和feign客户端了，所以我们现在需要先导入feign的maven坐标。<br>
B中导入坐标：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>编写client接口，用于访问Service-A服务<br>
<img src="https://img-blog.csdnimg.cn/20191212172005260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
HelloworldClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"Service-A"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloworldClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写controller，注入上方的HelloworldClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xkkj.serviceb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xkkj.serviceb.client.HelloworldClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: HelloWorldController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xuhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019/12/12 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloworldClient helloworldClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> helloworldClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们在启动类上加上注解：@EnableFeignClients，就可以实现服务间的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceBApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们运行看看效果：<a href="http://localhost:9999/hello" target="_blank" rel="noopener">http://localhost:9999/hello</a><br>
<img src="https://img-blog.csdnimg.cn/20191212172507618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
显然调用成功了，但是还有一个情况我们没有考虑，服务间的请求是有默认时间限制的，如果超过时间就会报错，feign默认的响应时间是1000mm，所以我们在配置文件中配置feign的超时时间即可<br>
在service-b的yml中配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  #建立连接超时时间</span><br><span class="line">  ReadTimeout: <span class="number">5000</span></span><br><span class="line">  #读取资源超时间</span><br><span class="line">  ConnectTimeout: <span class="number">5000</span></span><br></pre></td></tr></table></figure>
<p>这样就可以有效避免因为响应慢而导致报错的这种情况。</p>
<p>这里的ribbon相信大家如果有一定了解，应该都知道它可以实现负载均衡<br>
那么我们现在来看看，它是实现的效果。<br>
首先我们将Service-A的controller方法，输出一条相信到控制台，我们就可以清晰看到那个服务执行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: HelloWorldController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xuhao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2019/12/12 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"欢迎来到Spring Cloud微服务的世界！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"欢迎来到Spring Cloud微服务的世界！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>负载均衡肯定是同一个请求，但是被分到了不同的服务端口或者服务<br>
那么我们现在将Service-A服务改变端口，启动两次模拟负载均衡的环境</p>
<p>我们现在重启项目，启动后查看注册中心：<br>
<img src="https://img-blog.csdnimg.cn/20191212174543670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
现在我们重新运行：<a href="http://localhost:9999/hello" target="_blank" rel="noopener">http://localhost:9999/hello</a><br>
并且清空控制台，运行后你会发现，刚刚那就输出语句分别打印在项目的8888端口和8889端口，然后他们之间来回切换，这就是我们所谓的本地负载均衡。<br>
<img src="https://img-blog.csdnimg.cn/20191212175007625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20191212175027131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwOTQwMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="三、总结">三、总结</h2>
<p>项目地址：<a href="https://github.com/xuhao008/Spring-Cloud" target="_blank" rel="noopener">https://github.com/xuhao008/Spring-Cloud</a><br>
Spring Cloud的环境搭建就到这里了，其实整体来说不难，整个帖子可能比较繁琐，都是一些入门级别的，我也是看了好多博主的帖子，最后自己才写出来的，希望可以给刚刚入门的人一些帮助。接下来我也会再写一篇使用spring cloud进行的增删改查一系列操作的dome，如果想了解更多可以看看。</p>
]]></content>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
</search>
